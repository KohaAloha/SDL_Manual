=head0 Drawing

=head1 Preview

SDL provides several ways to draw on screen; these methods can be broken down into: Primitives, Images and Text. 
All three methods draw on a single object the Surface. The Surface is represented by C<SDLx::Surface>. Even our 
C<SDLx::App> is a C<SDLx::Surface>. This means that we can draw directly on the C<SDLx::App>, however there are 
several advantages to drawing on multiple surfaces. In this chapter we will explore these methods of drawing, and 
make a pretty picture.

=head1 Program

=for programlisting

    use SDL;
    use SDLx::App;

    my $app = SDLx::App->new( w => 400, h => 400, title => 'Drawing Examples' );

    #Draw Code Starts Here


    #Draw Code Ends Here

    $app->update();
  
    sleep(2);

=for programlisting

=head1 Syntax Overview

Drawing in SDL are done on Surfaces. The C<SDLx::Surface> object provides access to methods in the form of:

    $surface->draw_{something}( .... );

Parameters are usually provided as array references, to define areas and colors.

=head2 Rectangular Parameters

Some parameters are just a quick definition of the positions and dimensions. For a rectangle that will be placed at C<(20, 20)> pixel units on the screen, and a dimension of C<40x40> pixel units the following would suffice.

    my $rect = [20, 20, 40, 40];

=head2 Color

X<Color> in SDL is described by 4 numbers. The first three numbers define the Red, Blue, Green intensity of the color. The final number defines the transparency of the Color.

    my $color = [255, 255, 255, 255];

The values of the numbers range from 0-255 for 32 bit depth in RGBA format.

=begin sidebar

The bits of the surface are set when the surface or app is made. 

    my $app = SDLx::App->new(  depth => 32 ); 

Other options are 24,16 and 8. 32 is the default bit depth.

=end sidebar

=head1 Pixels 

All C<SDLx::Surface>s are made of pixels that can be read and written to via a tied array interface.

    $app->[$x][$y] = $color;

The C<$color> is defined as an unsigned integer value which is construct in the following format, C<0xRRBBGGAA>. 
This is a hexidecimal number. Here are some examples:

    $white = 0xFFFFFFFF;
    $black = 0x000000FF;
    $red   = 0xFF0000FF;
    $blue  = 0x00FF00FF;
    $green = 0x0000FFFF;

=head1 Primitives

Drawing X<Primitives> are usually simples shapes that can be used for creating graphics dynamically. 

=head2 Lines

    $app->draw_line( [200,20], [20,200], [255, 255, 0, 255] );

This will draw a yellow line from positions C< (200,20) > to C< (20,200) >.

=for figure 
       \includegraphics[width=0.5\textwidth]{../src/images/draw-1.png}      
        \caption{Drawing a line}               
         \label{fig:draw_line}   

=head2 Rectangles

Rectangles are a common building blocks for games. In SDL rectangles are the most cost effective of the primitives to draw.

    $app->draw_rect( [10,20, 40, 40 ], [255, 255, 255,255] );

The above will add a white square of size C<40x40> onto the screen at the position C<(10,20)>.  

=for figure 
       \includegraphics[width=0.5\textwidth]{../src/images/draw-2.png}      
        \caption{Drawing a Rectangle}               
         \label{fig:draw_rect}   

=head2 Circles

Circles are drawn similarly either filled or unfilled.

    $app->draw_circle( [100,100], 20, [255,0,0,255] );
    $app->draw_circle_filled( [100,100], 19, [0,0,255,255] );

Now we will have a filled circle, colored blue and unfilled circle, colored as red.

=for figure                                                                                                                                                  
       \includegraphics[width=0.5\textwidth]{../src/images/draw-3.png}                                                                                       
        \caption{Drawing a Circle}                                                                                                                        
         \label{fig:draw_circle}

=for figure                                                                                                                                                  
       \includegraphics[width=0.5\textwidth]{../src/images/draw-4.png}                                                                                       
        \caption{Drawing a filled Circle}                                                                                                                        
         \label{fig:draw_filled_circle}

=head2 More GFX functions

For more complex drawing functions have a look at C<SDL::GFX::Primitives>. 

=head1 Multiple Surfaces

Now we don't always use one surface. Most games use many Surfaces. These are held in memory.
You can make blank ones and draw on them. Or you can make Surfaces from various data. 

=head2 Creating Surfaces

=head3 Images

Images can be loaded as surfaces.

=head3 Sprites

Sprites is a lot better way to think of this.

=head3 Text

=head4 Default GFX

It is ugly but can be useful.

=head4 TrueType 

This is probably the more common way to use text in SDL. However it has its limitations

=head4 Pango 

Pango features several rendering options, and thus is heavy. It is good for multilingual support.

=for vim: spell
