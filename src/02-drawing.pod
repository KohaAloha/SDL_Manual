=head0 Drawing

X<Draw>

SDL provides several ways to draw graphical elements on the screen in three
general categories: primitives, images, and text. All drawing occurs on a
surface, represented by the C<SDLx::Surface> class. Even the C<SDLx::App> is an
C<SDLx::Surface>. Though this means it's possible to draw directly to the app's
surface, there are several advantages to drawing on multiple surfaces.

=head1 Coordinates

X<Draw, Coordiates>

SDL's surface coordinate system has its origin (where both the x and y
coordinates have the value of zero) in the upper left corner. As the value of x
increases, the position moves to the right of the origin. As the value of y
increases, the position moves downward from the origin. The API always lists
coordinates in x, y order.

=begin sidebar

The SDL library documentation has an extended discussion on coordinates:
U<http://sdltutorials.com/sdl-coordinates-and-blitting>.

=end sidebar

X<Draw, Surface>

=head1 Drawing with SDL

You can produce original pictures knowing little more than how to draw to a
surface with SDL:

=for figure
       \includegraphics[width=0.5\textwidth]{../src/images/flower.png}
        \caption{A field of flowers}
         \label{fig:flowers}

=head2 Surface Drawing Methods

As mentioned earlier, all drawing in SDL requires a surface. The
C<SDLx::Surface> object provides access to methods in the form of:

    $surface->draw_{something}( .... );

Parameters to these methods are generally coordinates and colors, provided as
array references.

X<Draw, Methods>

=head3 Rectangular Parameters

Some parameters are sets of coordinate positions and dimensions.  For example,
parameters to describe a rectangle of C<40x40> pixels placed at C<(20, 20)>
pixel units on the screen make a four-element array reference of x, y, width,
height:

    my $rect = [20, 20, 40, 40];

Z<Draw>
X<Rectangular Parameters>

=head3 Color

Z<Draw>
X<Color Parameters>

=for editor

Need to document what the magnitude of the color and transparency values mean.

=end for

SDL color parameters require four-element array references. The first three
numbers define the Red, Green, and Blue intensity of the color. The final
number defines the transparency of the color.

    my $color = [255, 255, 255, 255];

The magnitude of each color value determines how much of that color component
will be mixed into the resulting color. A 0 value specifies that none of the
color channel should be used while 255 specifies a maximum intensity for a
particular channel. The first value corresponds with the Red channel, so a
higher number there means more red will be mixed into the resulting color.
It is a common practice to achieve a grayscale of varying intensity by
specifying the same value for each of the Red, Green, and Blue color
channels. The fourth and final value designates the transparency (or Alpha
channel) where a 0 value makes the resulting color fully transparent and
255 makes it entirely opaque. A transparency value somewhere in between
will allow underlying (pixel data of surfaces below the current one) colors to 
be blended with the specified RGB values into the final color output.

You may also represent a color as hexadecimal values, where the values of the
numbers range from 0-255 for 32 bit depth in RGBA format:

    my $color = 0xFFFFFFFF;
    my $white = 0xFFFFFFFF;
    my $black = 0x000000FF;
    my $red   = 0xFF0000FF;
    my $green = 0x00FF00FF;
    my $blue  = 0x0000FFFF;

... or as four-byte hexadecimal values, where each two-digit byte encodes the
same RGBA values:

    my $goldenrod = 0xDAA520FF;

=begin sidebar

=head4 NOTE: Depth of Surface

X<Surface, Depth>

The color depth of the surface--how many bits are available to describe
colors--is a property of the relevant C<SDLx::Surface> or C<SDLx::App>. Set it
in its constructor:

    my $app = SDLx::App->new( depth => 32 );

The default bit depth is 32, such that each color component has 256 possible
values. Other options are 24, 16, and 8.

=end sidebar

=head2 Pixels

X<Surface, Pixels>

All C<SDLx::Surface>s are collections of pixels. You can read from and write to these pixels by treating the surface as an array reference:

    $app->[$x][$y] = $color;

... where C<$color> is an unsigned integer value using the hexadecimal format
(C<0xRRGGBBAA>) I<or> an anonymous array of the form C<[$red, $green, $blue,
$alpha]>.

=head2 Primitives

X<Draw Primitives>

Drawing primitives are simple shapes that SDL supports natively.

=for figure
       \includegraphics[width=0.5\textwidth]{../src/images/draw-1.png}
        \caption{Drawing a line}
         \label{fig:draw_line}

=head3 Lines

X<Draw, Line>

A line is a series of contiguous pixels between two points. The C<draw_line>
method causes SDL to draw a line to a surface:

    $app->draw_line( [200, 20], [20, 200], [255, 255, 0, 255] );

This will draw a yellow line from positions C<(200, 20)> to C<(20, 200)>.

=for figure
       \includegraphics[width=0.5\textwidth]{../src/images/draw-2.png}
        \caption{Drawing a Rectangle}
         \label{fig:draw_rect}

=head3 Rectangles

X<Draw, Rectangle>

A rectangle is a four-sided, filled polygon. Rectangles are a common building
block for games. In SDL, rectangles are the most cost effective of the
primitives to draw. The C<draw_rect> method draws a rectangle on a surface:

    $app->draw_rect( [10, 20, 40, 40 ], [255, 255, 255,255] );

This draws a white square of size C<40x40> onto the screen at the position
C<(10,20)>.

=for figure
       \includegraphics[width=0.5\textwidth]{../src/images/draw-3.png}
        \caption{Drawing a Circle}
         \label{fig:draw_circle}

=for figure
       \includegraphics[width=0.5\textwidth]{../src/images/draw-4.png}
        \caption{Drawing a filled Circle}
         \label{fig:draw_filled_circle}

=head3 Circles

X<Draw, Circle>

A circle is a primitive a fixed radius around a given point.  Circles may be
filled or unfilled. The C<draw_circle> and C<draw_circle_filled> methods draw
these to a surface:

    $app->draw_circle(        [100, 100], 20, [255, 0,   0, 255] );
    $app->draw_circle_filled( [100, 100], 19, [0,   0, 255, 255] );

These draw an unfilled red circle and a filled blue circle.

SDL provides more complex primitives in C<SDL::GFX::Primitives>.

=head2 Drawing with Primitives

X<Draw, Complex>

It's easy to combine several primitives to draw an interesting images.

=begin programlisting

    use strict;
    use warnings;
    use SDL;
    use SDLx::App;

    my $app = SDLx::App->new(
        w     => 500,
        h     => 500,
        d     => 32,
        title => 'Pretty Flowers'
    );

    # Add the blue skies
    $app->draw_rect( [ 0,   0, 500, 500 ], [ 20,  50, 170, 255 ] );

    # Draw a green field
    $app->draw_rect( [ 0, 400, 500, 100 ], [ 50, 170,  20, 100 ] );

    # Make a surface for the flower
    my $flower = SDLx::Surface->new( width => 50, height => 100 );

    # With a black background
    $flower->draw_rect( [  0,  0, 50, 100 ], [ 0,   0, 0,   0 ] );

    # Draw a pretty green stem
    $flower->draw_rect( [ 23, 30,  4, 100 ], [ 0, 255, 0, 255 ] );

    # And a simple flower bud
    $flower->draw_circle_filled( [ 25, 25 ], 10, [ 150, 0, 0, 255 ] );
    $flower->draw_circle(        [ 25, 25 ], 10, [ 255, 0, 0, 255 ] );

    # Draw flower on $app
    $flower->blit( $app, [ 0, 0, 50, 100 ] );

    $app->update();

    sleep(1);

=end programlisting

=for figure
       \includegraphics[width=0.5\textwidth]{../src/images/flower-1.png}
        \caption{Looks so lonely there all alone}
         \label{fig:draw_flower_lone}

=head1 Drawing on Multiple Surfaces

X<Surface, Multiple>

The examples so far have drawn on only a single surface, the display. SDL makes it possible to write on multiple surfaces. These other surfaces exist only in memory until you draw them to the display.

=head2 Creating Surfaces

X<Surface, Creating>

There are several ways to create an C<SDLx::Surface> for use. The most common
is to create one manually with a constructor call:

    $surface = SDLx::Surface->new( width => $width, height => $height );

C<SDL::Image> and C<SDL::Video> can load images as surfaces too.  C<SDL::Image>
provides support for all types of images, provided that the underlying
C<SDL_image> library supports the image type you want to load. For example,
C<SDL_image> must support PNG images to use:

    $surface = SDL::Image::load( 'picture.png' );

X<Surface, Image>

In the event that the desired C<SDL_image> library is unavailable, you can
fallback to the built-in support for the C<.bmp> format.

    $surface = SDL::Video::load_BMP( 'picture.bmp' );

The C<SDLx::Sprite> module provides another option to manipulate surfaces.

=head1 Lots of Flowers but One Seed

The flower example used a method called C<blit> to draw a surface to the
display. This method copies data from one surface to another. It's a
fundamental operation, but it's a low level operation.  C<SDLx::Sprite>
provides higher level options.  Besides making drawing simpler, C<SDLx::Sprite>
adds several other features useful for moving images. Here's a revised example
using C<SDLx::Sprite> for flowers:

X<Surface, Blit>

=begin programlisting

    use strict;
    use warnings;
    use SDL;
    use SDLx::App;
    use SDLx::Sprite;

    my $app = SDLx::App->new(
        w     => 500,
        h     => 500,
        d     => 32,
        title => 'Pretty Flowers'
    );

    # Adding blue skies
    $app->draw_rect( [ 0,   0, 500, 500 ], [ 20, 50, 170, 255 ] );

    # Draw a green field
    $app->draw_rect( [ 0, 400, 500, 100 ], [ 50, 170, 20, 100 ] );

    my $flower = SDLx::Sprite->new( width => 50, height => 100 );

    # Use ->surface() to access a sprite's SDLx::Surface

    # Make the background black
    $flower->surface->draw_rect( [  0,  0, 50, 100 ], [ 0,   0, 0,   0 ] );

    # Now for a pretty green stem
    $flower->surface->draw_rect( [ 23, 30,  4, 100 ], [ 0, 255, 0, 255 ] );

    # Add the simple flower bud
    $flower->surface->draw_circle_filled( [ 25, 25 ], 10, [ 150, 0, 0, 255 ] );
    $flower->surface->draw_circle(        [ 25, 25 ], 10, [ 255, 0, 0, 255 ] );

    $flower->draw_xy( $app, 0, 0 );

    $app->update();

    sleep(1);

=end programlisting

Flowers usually don't grow in the sky. Flowers make more sense on the ground.
It's easy to insert plenty of identical flowers from a single sprite. Replace
the line:

    $flower->draw_xy( $app, 0, 0 );

... with:

=begin programlisting

    for (0 .. 500) {
        my $y =           425 - rand( 50);
        $flower->draw_xy( $app, rand(500) - 20, $y );
    }

=end programlisting

... to make an entire field of flowers.

=for editor

Probably don't need this.

=end for

=for vim: spell
