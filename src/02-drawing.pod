
=head0 Drawing

=head1 Preview

SDL provides several ways to draw graphical elements on the screen; these methods can be broken down into three general categories: Primitives, Images and Text. 
methods in each of the three categories draw a single object on the Surface. The Surface is represented by C<SDLx::Surface>. Even our 
C<SDLx::App> is a C<SDLx::Surface>. This means that we can draw directly on the C<SDLx::App>, however there are 
several advantages to drawing on multiple surfaces. In this chapter we will explore these methods of drawing, and 
make a pretty picture.

=head1 Objective 

Using SDL we will try to construct the following image. 

=for figure 
       \includegraphics[width=0.5\textwidth]{../src/images/flower.png}      
        \caption{A field of flowers}               
         \label{fig:flowers}   



=head1 Program

Below is the program that generates the above image. 

=begin programlisting

    use SDL;
    use SDLx::App;
    use SDLx::Sprite;

    my $app = SDLx::App->new(
        w     => 500,
        h     => 500,
        d     => 32,
        title => 'Pretty Flowers'
    );

    # Draw Code Starts here

    my $flower = SDLx::Sprite->new( width => 50, height => 100 );

    $flower->surface->draw_rect( [ 0, 0, 50, 100 ], [ 0, 0, 0, 0 ] );

    $flower->surface->draw_rect( [ 23, 30, 4, 100 ], [ 0, 255, 0, 255 ] );
    $flower->surface->draw_circle_filled( [ 25, 25 ], 10, [ 150, 0, 0, 255 ] );
    $flower->surface->draw_circle( [ 25, 25 ], 10, [ 255, 0, 0, 255 ] );
    $flower->alpha_key(0);

    $app->draw_rect( [ 0, 0, 500, 500 ], [ 20, 50, 170, 255 ] );

    $app->draw_rect( [ 0, 400, 500, 100 ], [ 50, 170, 20, 100 ] );

    foreach ( 0 .. 500 ) {
        my $y = 425 - rand(50);
        $flower->draw_xy( $app, rand(500) - 20, $y );
    }

    #Draw Code Ends Here

    $app->update();

    sleep(2);

=end programlisting

=head1 Drawing the Flower

To begin actually drawing the flower, we need to cover some theory.

=head2 Syntax Overview

Drawing in SDL are done on Surfaces. The C<SDLx::Surface> object provides access to methods in the form of:

    $surface->draw_{something}( .... );

Parameters are usually provided as array references, to define areas and colors.

=head3 Rectangular Parameters

Some parameters are just a quick definition of the positions and dimensions. For a rectangle that will be placed at C<(20, 20)> pixel units on the screen, and a dimension of C<40x40> pixel units the following would suffice.

    my $rect = [20, 20, 40, 40];

=head3 Color

X<Color> in SDL is described by 4 numbers. The first three numbers define the Red, Blue, Green intensity of the color. The final number defines the transparency of the Color.

    my $color = [255, 255, 255, 255];

The values of the numbers range from 0-255 for 32 bit depth in RGBA format.

=begin sidebar

=head4 NOTE: Depth of Surface

The bits of the surface are set when the C<SDLx::Surface> or C<SDLx::App> is made. 

    my $app = SDLx::App->new(  depth => 32 ); 

Other options are 24,16 and 8. 32 is the default bit depth.

=end sidebar

=head2 Pixels 

All C<SDLx::Surface>s are made of pixels that can be read and written to via a tied array interface.

    $app->[$x][$y] = $color;

The C<$color> is defined as an unsigned integer value which is construct in the following format, C<0xRRBBGGAA>. 
This is a hexadecimal number. Here are some examples:

    $white = 0xFFFFFFFF;
    $black = 0x000000FF;
    $red   = 0xFF0000FF;
    $blue  = 0x00FF00FF;
    $green = 0x0000FFFF;

=head2 Primitives

Drawing X<Primitives> are usually simples shapes that can be used for creating graphics dynamically. 

=for figure 
       \includegraphics[width=0.5\textwidth]{../src/images/draw-1.png}      
        \caption{Drawing a line}               
         \label{fig:draw_line}   

=head3 Lines

    $app->draw_line( [200,20], [20,200], [255, 255, 0, 255] );

This will draw a yellow line from positions C< (200,20) > to C< (20,200) >.

=for figure 
       \includegraphics[width=0.5\textwidth]{../src/images/draw-2.png}      
        \caption{Drawing a Rectangle}               
         \label{fig:draw_rect}   

=head3 Rectangles

Rectangles are a common building blocks for games. In SDL rectangles are the most cost effective of the primitives to draw.

    $app->draw_rect( [10,20, 40, 40 ], [255, 255, 255,255] );

The above will add a white square of size C<40x40> onto the screen at the position C<(10,20)>.  

=for figure                                                                                                                                                  
       \includegraphics[width=0.5\textwidth]{../src/images/draw-3.png}                                                                                       
        \caption{Drawing a Circle}                                                                                                                        
         \label{fig:draw_circle}

=for figure                                                                                                                                                  
       \includegraphics[width=0.5\textwidth]{../src/images/draw-4.png}                                                                                       
        \caption{Drawing a filled Circle}                                                                                                                        
         \label{fig:draw_filled_circle}


=head3 Circles

Circles are drawn similarly either filled or unfilled.

    $app->draw_circle( [100,100], 20, [255,0,0,255] );
    $app->draw_circle_filled( [100,100], 19, [0,0,255,255] );

Now we will have a filled circle, colored blue and unfilled circle, colored as red.

=head3 More Primitives

For more complex drawing functions have a look at C<SDL::GFX::Primitives>. 

=head2 Application: Primitives

Using our knowledge of Primitives in SDL, lets draw our field, sky and a simple flower.

=begin programlisting

    use strict;
    use warnings;
    use SDL;
    use SDLx::App;

    my $app = SDLx::App->new(
        w     => 500,
        h     => 500,
        d     => 32,
        title => 'Pretty Flowers'
    );

    #Adding the blue skies
    $app->draw_rect( [ 0, 0, 500, 500 ], [ 20, 50, 170, 255 ] );

    #Draw our green field
    $app->draw_rect( [ 0, 400, 500, 100 ], [ 50, 170, 20, 100 ] );

    # Make a surface 50x100 pixels
    my $flower = SDLx::Surface->new( width => 50, height => 100 );

    # Lets make the background black
    $flower->draw_rect( [ 0, 0, 50, 100 ], [ 0, 0, 0, 0 ] );

    # Now for a pretty green stem
    $flower->draw_rect( [ 23, 30, 4, 100 ], [ 0, 255, 0, 255 ] );

    # And the simple flower bud
    $flower->draw_circle_filled( [ 25, 25 ], 10, [ 150, 0, 0, 255 ] );
    $flower->draw_circle( [ 25, 25 ], 10, [ 255, 0, 0, 255 ] );

    $flower->blit( [ 0, 0, 50, 100 ], $app );

    $app->update();

    sleep(1);

=end programlisting

=for figure                                                                                                                                                  
       \includegraphics[width=0.5\textwidth]{../src/images/flower-1.png}                                                                                       
        \caption{Looks so lonely there all alone}                                                                                                                        
         \label{fig:draw_flower_lone}



=head1 Drawing a Field of Flowers

=head2 Multiple Surfaces

So far we have been drawing only on one surface, the display. In SDL it is possible to write on 
several surfaces that are in memory. These surfaces can later on be added on to the display to 
show them. The Surface is defined as a C<SDLx::Surface> type in SDL Perl. 

=head3 Creating Surfaces

There are several ways to create C<SDLx::Surface> for use.

=head3 Raw Surfaces

For the purposes of preparing surfaces using only draw functions ( as mentioned above )
we can create a surface using the C<SDLx::Surface>'s constructor.

    $surface = SDLx::Surface->new( width => $width, height => $height );

=head3 Images in SDL

Using C<SDL::Image> and C<SDL::Video> we can load images as surfaces too. 
C<SDL::Image> provides support for all types of images, however it requires
C<SDL_image> library support to be compiled with the right library. 

    $surface = SDL::Image::load( 'picture.png' );

In case the C<SDL_Image> library is unavailable we can use the build in support
for the C<.bmp> format.

    $surface = SDL::Video::load_BMP( 'picture.bmp' );

Generally however the C<SDLx::Sprite> module is used. 

=head1 Lots of Flowers but One Seed

=head2 Sprites

You might have noticed that putting another C<SDLx::Surface> on the C<$app> requires the usage 
of a C<blit( )> function, which may not clarify as to what is going on there. Fortunately a C<SDLx::Sprite> 
can be used to make our flower. Besides making drawing simpler, C<SDLx::Sprite> adds several other features 
that we need for game images that move a lot. For now lets use C<SDLx::Sprite> for our flowers.

=begin programlisting

    use strict;
    use warnings;
    use SDL;
    use SDLx::App;
    use SDLx::Sprite;

    my $app = SDLx::App->new(
        w     => 500,
        h     => 500,
        d     => 32,
        title => 'Pretty Flowers'
    );

    #Adding the blue skies
    $app->draw_rect( [ 0, 0, 500, 500 ], [ 20, 50, 170, 255 ] );

    #Draw our green field
    $app->draw_rect( [ 0, 400, 500, 100 ], [ 50, 170, 20, 100 ] );

    my $flower = SDLx::Sprite->new( width => 50, height => 100 );

    # To access the SDLx::Surface to write to we use the ->surface() method

    # Lets make the background black
    $flower->surface->draw_rect( [ 0, 0, 50, 100 ], [ 0, 0, 0, 0 ] );

    # Now for a pretty green stem
    $flower->surface->draw_rect( [ 23, 30, 4, 100 ], [ 0, 255, 0, 255 ] );

    # And the simple flower bud
    $flower->surface->draw_circle_filled( [ 25, 25 ], 10, [ 150, 0, 0, 255 ] );
    $flower->surface->draw_circle( [ 25, 25 ], 10, [ 255, 0, 0, 255 ] );

    $flower->draw_xy( $app, 0, 0 );

    $app->update();

    sleep(1);

=end programlisting

Obviously at this point we don't want our single flower floating in the sky, so we will draw several of them 
on the ground. Delete everything including and after 

    $flower->draw_xy($app, 0,0)

and insert the below code to get a field of flowers.

=begin programlisting

    foreach( 0..500 )
    {
	    my $y =  425 - rand( 50 );
	    $flower->draw_xy( $app, rand(500)-20, $y );
    }

    $app->update();

    sleep(1);  

=end programlisting

=for vim: spell
