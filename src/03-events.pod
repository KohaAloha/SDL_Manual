=head0 Handling Events

=head1 The SDL Queue and Events

SDL process events using a queue. The event queue holds all events that occur 
until they are removed. SDL events are understood via the C<SDL::Event> object.
This chapter will go through some examples of how to process various events for 
common useage.

=head1 Quitting with Grace

So far we have not been exiting an C<SDLx::App> in a graceful manner. Using 
the built in C<SDLx::Controller> in the C<$app> we can handle events using 
callbacks.

=for programlisting

    use strict;
    use warnings;
    use SDL;
    use SDL::Event;
    use SDLx::App;

    my $app = SDLx::App->new( w => 200, h => 200, d => 32, title => "Quit Events" );

    #We can add an event handler 
    $app->add_event_handler( \&quit_event );

    #Then we will run the app
    #which will start a loop for keeping the app alive
    $app->run();

    sub quit_event
    {
        #The callback is provided a SDLx::Event to use
	    my $event = shift;

        #If we return 0 the $app will exit for us
	    return 0 if $event->type == SDL_QUIT;

        #Otherwise we continue run()ing
	    return 1;
    }

=end programlisting

C<SDLx::App> calls the event_handlers and expect either a 1 or 0 returned. When 0 is returned C<SDLx::App> will exit gracefully.

=for sidebar

It is possible to do event processing with out using C<SDLx::App> callbacks. Have a look at the perldoc for C<SDL::Events>.

    perldoc SDL::Events 

=end sidebar

=head1 Small Paint: Input Devices

SDL events also allow us to handle input from various devices. To demonstrate two of the common devices, lets make a simple paint program.
It will provide a small black window where you can draw with the mouse. Moreover when you press the number keys 0-10 it will pick different
colors. By pressing 'q' or 'Q' we will exit. Pressing 'ctrl-s' will save our image to the file 'painted.bmp'. 

=head2 Keyboard

To handle the keyboard specifications we will create another event callback.

=begin programlisting

    ...
    
    my @colors = (  0xFF0000FF, 0x00FF00FF,
                    0x0000FFFF, 0xFFFF00FF,
                    0xFF00FFFF, 0x00FFFFFF,
                    0xCCFFCCFF, 0xFFCC33FF,
                    0x000000FF, 0xFFFFFFFF );

    my $brush_color = 0;

    ...
  
    sub keyboard_event
    {
        my $event = shift;
        
        #Check that our type of event press is a SDL_KEYDOWN
        if( $event->type == SDL_KEYDOWN )
        {
            #Convert the key_symbol (integer) to a keyname
            my $key_name = SDL::Events::get_key_name( $event->key_sym );
            
            #if our $key_name is a digit use it as a color
            my $brush_color = $key_name if $key_name =~ /^\d$/;
            
        }
    }

    ...

    $app->add_event_handler(\&keyboard_event);
    $app->run()
  
=end programlisting

=head2 Mouse

Swift input for our axis.

=head2 Joystick

Yes! We can make a fighter pilot game now :D

=head2 System 

=head3 Window

Resizing and what not

=head2 Others

Magics!

=for vim: spell
