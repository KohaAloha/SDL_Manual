=head0 Handling Events

=head1 The SDL Queue and Events

SDL process events using a queue. The event queue holds all events that occur 
until they are removed. SDL events are understood via the C<SDL::Event> object.
This chapter will go through some examples of how to process various events for 
common useage.

=head1 Quitting with Grace

So far we have not been exiting an C<SDLx::App> in a graceful manner. Using 
the built in C<SDLx::Controller> in the C<$app> we can handle events using 
callbacks.

=for programlisting

    use strict;
    use warnings;
    use SDL;
    use SDL::Event;
    use SDLx::App;

    my $app = SDLx::App->new( w => 200, h => 200, d => 32, title => "Quit Events" );

    #We can add an event handler 
    $app->add_event_handler( \&quit_event );

    #Then we will run the app
    #which will start a loop for keeping the app alive
    $app->run();

    sub quit_event
    {
        #The callback is provided a SDLx::Event to use
	    my $event = shift;

        #If we return 0 the $app will exit for us
	    return 0 if $event->type == SDL_QUIT;

        #Otherwise we continue run()ing
	    return 1;
    }

=end programlisting

C<SDLx::App> calls the event_handlers and expect either a 1 or 0 returned. When 0 is returned C<SDLx::App> will exit gracefully.

=for sidebar

It is possible to do event processing with out using C<SDLx::App> callbacks. Have a look at the perldoc for C<SDL::Events>.

=end sidebar

=head1 Input Devices

Events can tell us the status of our input devices.

=head1 Keyboard

The ultimate input device.

=head1 Mouse

Swift input for our axis.

=head2 Joystick

Yes! We can make a fighter pilot game now :D

=head1 System 

=head2 Window

Resizing and what not

=head1 Others

Magics!

=for vim: spell
