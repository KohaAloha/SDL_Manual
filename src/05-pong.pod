=head0 Pong! 

=head1 The Game

Pong is one of the first popular video games in the world. It was created
by Allan Alcorn for Atari Inc. and released in 1972, being Atari's first
game ever, and sparkling the beginning of the video game industry.

Pong simulates a table tennis match ("ping pong"), where you try to defeat
your opponent by earning a higher score. Each player controls a paddle
moving it vertically on the screen, and use it to hit a bouncing ball
back and forth. You earn a point if your opponent is unable to return
the ball to your side of the screen.

And now we're gonna learn how to create one ourselves in Perl and SDL.

=head2 Getting our feet wet

Let's start by making a simple screen for our Pong clone. Open a file
in your favourite text editor and type:

  + #!/usr/bin/perl
  + use strict;
  + use warnings;
  + 
  + use SDL;
  + use SDLx::App;
  + 
  + # create our main screen
  + my $app = SDLx::App->new(
  +     width        => 500,
  +     height       => 500,
  +     title        => 'My Pong Clone!',
  +     dt           => 0.02,
  +     exit_on_quit => 1,
  + );
  + 
  + # let's roll!
  + $app->run;

Save this file as C<"pong.pl"> and run it by typing on the command line:

  perl pong.pl

You should see a 500x500 black window entitled I<"My Pong Clone!">. In our
L<SDLx::App> construction we also set a time interval (dt) of
0.02 for the game loop, and let it handle SDL_QUIT events for us.
If any of the arguments above came as a surprise to you, please refer
to previous chapters for an in-depth explanation.


=head2 Game Objects

There are three main game objects in Pong: the player's paddle, the enemy's
paddle, and a bouncing ball.

Paddles are rectangles moving vertically on the screen, and can be easily
represented with L<SDLx::Rect> objects. First, put C<SDLx::Rect> in your
module's declarations:

    use SDL;
    use SDLx::App;
  + use SDLx::Rect;

Now let's add a simple hash reference in our code to store our player's
paddle, between the call to C<< SDLx::App->new() >> and C<< $app->run >>.

We'll use a hash reference instead of just assigning a C<SDLx::Rect> to a
variable because it will allow us to store more information later on. If you
were building a more complex game, you should consider using actual objects.
For now, a simple hash reference will suffice:

  + my $player1 = {
  +      paddle => SDLx::Rect->new( 10, $app->h / 2, 10, 40),
  + };

As we know, C<SDLx::Rect> objects receive four arguments: x, y, width and
height, in this order. So in the code above we're creating a 10x40 paddle rect
for player 1, on the left side of the screen (C<< x = 10 >>) and somewhat in the
center (C<< y = $app->h / 2 >>).

Let's do the same for player 2, adding the following code right after the one
above:

  + my $player2 = {
  +      paddle => SDLx::Rect->new( $app->w - 20, $app->h / 2, 10, 40),
  + };

Player 2's paddle, also 10x40, needs to go to the right end of the screen. So
we make its C<x> position as our screen's width minus 20. Since the paddle has
a width of 10 itself and the C<x> position refers to the rect's top-left corner,
it will leave a space of 10 pixels between its rightmost side and the end of
the screen, just like we did for player 1.

Finally, the bouncing ball, a 10x10 rect in the middle of the screen:

  + my $ball = {
  +     rect => SDLx::Rect->new( $app->w / 2, $app->h / 2, 10, 10 ),
  + };


=head3 Collisions

=head2 Player

=head3 Score 

=head1 Animations

=head2 Ball

=head3 Kinematics

=head2 Paddle

=head3 Mapping Keys 

=for vim: spell
