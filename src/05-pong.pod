=head0 Pong! 

=head1 The Game

Pong is one of the first popular video games in the world. It was created
by Allan Alcorn for Atari Inc. and released in 1972, being Atari's first
game ever, and sparkling the beginning of the video game industry.

Pong simulates a table tennis match ("ping pong"), where you try to defeat
your opponent by earning a higher score. Each player controls a paddle
moving it vertically on the screen, and use it to hit a bouncing ball
back and forth. You earn a point if your opponent is unable to return
the ball to your side of the screen.

And now we're gonna learn how to create one ourselves in Perl and SDL.

=head2 Getting our feet wet

Let's start by making a simple screen for our Pong clone. Open a file
in your favourite text editor and type:

    + #!/usr/bin/perl
    + use strict;
    + use warnings;
    + 
    + use SDL;
    + use SDLx::App;
    + 
    + # create our main screen
    + my $app = SDLx::App->new(
    +     width        => 500,
    +     height       => 500,
    +     title        => 'My Pong Clone!',
    +     dt           => 0.02,
    +     exit_on_quit => 1,
    + );
    + 
    + # let's roll!
    + $app->run;

Save this file as C<"pong.pl"> and run it by typing on the command line:

  perl pong.pl

You should see a 500x500 black window entitled I<"My Pong Clone!">. In our
L<SDLx::App> construction we also set a time interval (dt) of
0.02 for the game loop, and let it handle SDL_QUIT events for us.
If any of the arguments above came as a surprise to you, please refer
to previous chapters for an in-depth explanation.


=head2 Game Objects

There are three main game objects in Pong: the player's paddle, the enemy's
paddle, and a bouncing ball.

Paddles are rectangles moving vertically on the screen, and can be easily
represented with L<SDLx::Rect> objects. First, put C<SDLx::Rect> in your
module's declarations:

      use SDL;
      use SDLx::App;
    + use SDLx::Rect;

Now let's add a simple hash reference in our code to store our player's
paddle, between the call to C<< SDLx::App->new() >> and C<< $app->run >>.

We'll use a hash reference instead of just assigning a C<SDLx::Rect> to a
variable because it will allow us to store more information later on. If you
were building a more complex game, you should consider using actual objects.
For now, a simple hash reference will suffice:

    + my $player1 = {
    +      paddle => SDLx::Rect->new( 10, $app->h / 2, 10, 40),
    + };

As we know, C<SDLx::Rect> objects receive four arguments: x, y, width and
height, in this order. So in the code above we're creating a 10x40 paddle rect
for player 1, on the left side of the screen (C<< x = 10 >>) and somewhat in the
center (C<< y = $app->h / 2 >>).

Let's do the same for player 2, adding the following code right after the one
above:

    + my $player2 = {
    +      paddle => SDLx::Rect->new( $app->w - 20, $app->h / 2, 10, 40),
    + };

Player 2's paddle, also 10x40, needs to go to the right end of the screen. So
we make its C<x> position as our screen's width minus 20. Since the paddle has
a width of 10 itself and the C<x> position refers to the rect's top-left corner,
it will leave a space of 10 pixels between its rightmost side and the end of
the screen, just like we did for player 1.

Finally, the bouncing ball, a 10x10 rect in the middle of the screen:

    + my $ball = {
    +     rect => SDLx::Rect->new( $app->w / 2, $app->h / 2, 10, 10 ),
    + };

Yes, it's a "square ball", just like the original :)

=head3 Show me what you got!

Now that we created our game objects, let's add a 'show' handler to render
them on the screen:

    + $app->add_show_handler(
    +     sub {
    +         # first, we clear the screen
    +         $app->draw_rect( [0, 0, $app->w, $app->h], 0x000000FF );
    + 
    +         # then we render the ball
    +         $app->draw_rect( $ball->{rect}, 0xFF0000FF );
    + 
    +         # ... and each paddle
    +         $app->draw_rect( $player1->{paddle}, 0xFF0000FF );
    +         $app->draw_rect( $player2->{paddle}, 0xFF0000FF );
    + 
    +         # finally, we update the screen
    +         $app->update;
    +     }
    + );

Our approach is rather simple here, "clearing" the screen by painting a
black rectangle the size of the screen, then using C<< draw_rect() >> calls
to paint opaque red (C<< 0xFF0000FF >>) rectangles in each object's position.


The result can be seen on the screenshot below:

=for figure
       \includegraphics[width=0.5\textwidth]{../src/images/pong1.png}
        \caption{First view of our Pong clone}
         \label{fig:pong1}


=head2 Moving the Player's Paddle

It's time to let the player move the left paddle! Take a few moments to
recap what motion is all about: changing your object's position with
respect to time. If it's some sort of magical teleportation repositioning,
just change the (x,y) coordinates and be gone with it. If however, we're
talking about real motion, we need to move at a certain speed. Our paddle
will have constant speed, so we don't need to worry about acceleration.
Also, since it will only move vertically, we just need to add the vertical
(y) velocity. Let's call it C<v_y> and add it to our paddle structure:

      my $player1 = {
           paddle => SDLx::Rect->new( 10, $app->h / 2, 10, 40),
    +      v_y    => 0,
      };

Ok, now we have an attribute for vertical velocity (C<v_y>) in our paddle,
so what? How will this update the C<y> position of the paddle? Well,
velocity is how much displacement happens in a unit of time, like 20 km/h
or 4 m/s. In our case, the unit of time is the app's C<dt>, so all we have
to do is move the paddle C<v_y> pixels per C<dt>. Here is where
the motion handlers come in handy:

    + # handles the player's paddle movement
    + $app->add_move_handler( sub {
    +     my ( $step, $app ) = @_;
    +     my $paddle = $player1->{paddle};
    +     my $v_y = $player1->{v_y};
    + 
    +     $paddle->y( $paddle->y + ( $v_y * $step ) );
    + });

If you recall previous chapters, the code above should be pretty
straightforward. When C<v_y> is 0 at any given run cycle, the paddle won't
change its C<y> position. If, however, there is a vertical velocity,
we update the C<y> position based on how much of the expected cycle
time (our app's "dt") has passed. A value of 1 in C<$step> indicates a
full cycle went through, and makes C<< $v_y * $step >> the same as
C<< $v_y * 1 >>, thus, plain C<< $v_y >> - which is the desired
speed for our cycle. Should the handler be called in a shorter cycle,
we'll move only the relative factor of that.

=head3 Player 2? Rinse and repeat

We're not going to worry at this point about moving your nemesis' paddle,
but since it uses the same motion mechanics of our player's, it won't
hurt to prepare it:

      my $player2 = {
           paddle => SDLx::Rect->new( $app->w - 20, $app->h / 2, 10, 40),
    +      v_y    => 0,
      };

And add a simple motion handler, just like our player's:

    + # handles AI's paddle movement
    + $app->add_move_handler( sub {
    +     my ( $step, $app ) = @_;
    +     my $paddle = $player2->{paddle};
    +     my $v_y = $player2->{v_y};
    +
    +     $paddle->y( $paddle->y + ( $v_y * $step ) );
    + });

=head3 Back to our Player: Move that Paddle!

We have preset C<v_y> to zero as the paddle's initial velocity, so our
player's paddle won't go haywire when the game starts. But we still need
to know when the user wants to move it up or down the screen. In order
to do that, we can bind the up and down arrow keys of the keyboard to
positive and negative velocities for our paddle, through an event hook.
Since we're going to use some event constants like C<SDLK_DOWN>, we need
to load the L<SDL::Events> module:

     use SDL;
   + use SDL::Events;
     use SDLx::App;
     use SDLx::Rect;

Then we can proceed to create our event hook:

   + # handles keyboard events
   + $app->add_event_handler(
   +     sub {
   +         my ( $event, $app ) = @_;
   +
   +         # user pressing a key
   +         if ( $event->type == SDL_KEYDOWN ) {
   +
   +             # up arrow key means going up (negative vel)
   +             if ( $event->key_sym == SDLK_UP ) {
   +                 $player1->{v_y} = -2;
   +             }
   +             # down arrow key means going down (positive vel)
   +             elsif ( $event->key_sym == SDLK_DOWN ) {
   +                 $player1->{v_y} = 2;
   +             }
   +         }
   +         # user releasing a key
   +         elsif ( $event->type == SDL_KEYUP ) {
   +
   +             # up or down arrow keys released, stop the paddle
   +             if (
   +                     $event->key_sym == SDLK_UP
   +                  or $event->key_sym == SDLK_DOWN
   +             ) {
   +                 $player1->{v_y} = 0;
   +             }
   +         }
   +     }
   + );

Again, nothing new here. Whenever the user presses the up arrow key, we
want the paddle to go up. Keep in mind our origin point (0,0) in SDL is
the top-left corner, so a negative C<v_y> will decrease the paddle's C<y>
and send us B<up> the screen. Alternatively, we add a positive value to
C<v_y> whenever the user presses the down arrow key, so the paddle will
move B<down>, away from the top of the screen. When the user releases
either the up or down arrow keys, we stop the paddle by setting C<v_y> to 0.

=head2 A Bouncing Ball

How about we animate the game ball? The movement itself is pretty similar
to our paddle's, except the ball will also have a horizontal velocity
("C<v_x>") component, letting it move all over the screen.

First, we add the velocity components to our ball structure:

     my $ball = {
         rect => SDLx::Rect->new( $app->w / 2, $app->h / 2, 10, 10 ),
   +     v_x  => -2.7,
   +     v_y  => 1.8,
     };

The ball will have an initial velocity of -2.7 horizontally (just as a
negative vertical velocity moves the object up, a negative horizontal
velocity will move it towards the left side of the screen), and 1.8
vertically. Next, we create a motion handler for the ball, updating
the ball's C<x> and C<y> position according to its speed:

   + # handles the ball movement
   + $app->add_move_handler( sub {
   +     my ( $step, $app ) = @_;
   +     my $ball_rect = $ball->{rect};
   +
   +     $ball_rect->x( $ball_rect->x + ($ball->{v_x} * $step) );
   +     $ball_rect->y( $ball_rect->y + ($ball->{v_y} * $step) );
   + });

This is just like our paddle's motion handler: we update the ball's C<x>
and C<y> positioning on the screen according to the current velocity. If
you are paying attention, however, you probably realized the code above is
missing a very important piece of logic. Need a clue? Try running the game
as it is. You'll see the ball going, going, and... gone!

We need to make sure the ball is bound to the screen. That is, it needs to
collide and bounce back whenever it reaches the top and bottom edges of the
screen. So let's change our ball's motion handler a bit, adding this
functionality:

     # handles the ball movement
     $app->add_move_handler( sub {
         my ( $step, $app ) = @_;
         my $ball_rect = $ball->{rect};
    
         $ball_rect->x( $ball_rect->x + ($ball->{v_x} * $step) );
         $ball_rect->y( $ball_rect->y + ($ball->{v_y} * $step) );
 
   +     # collision to the bottom of the screen
   +     if ( $ball_rect->bottom >= $app->h ) {
   +         $ball_rect->bottom( $app->h );
   +         $ball->{v_y} *= -1;
   +     }
   +
   +     # collision to the top of the screen
   +     elsif ( $ball_rect->top <= 0 ) {
   +         $ball_rect->top( 0 );
   +         $ball->{v_y} *= -1;
   +     }
     });

If the new x (C<"left">) and y (C<"top">) values would take the ball
totally or partially off the screen, we replace it with the farthest
position possible (making it "touch" that edge of the screen) and
reverse C<v_y>, so it will go the opposite way on the next cycle,
bouncing back into the screen.

=head3 He shoots... and scores!!

So far, so good. But what should happen when the ball hits the left or
right edges of the screen? Well, according to the rules of Pong, this
means the player on the opposite side scored a point, and the ball should
go back to the center of the screen. Let's begin by adding a 'score'
attribute for each player:

      my $player1 = {
           paddle => SDLx::Rect->new( 10, $app->h / 2, 10, 40),
           v_y    => 0,
    +      score  => 0,
      };

      my $player2 = {
           paddle => SDLx::Rect->new( $app->w - 20, $app->h / 2, 10, 40),
           v_y    => 0,
    +      score  => 0,
      };

Now we should teach the ball's motion handler what to do when it reaches
the left and right corners:

     # handles the ball movement
     $app->add_move_handler( sub {
         my ( $step, $app ) = @_;
         my $ball_rect = $ball->{rect};
    
         $ball_rect->x( $ball_rect->x + ($ball->{v_x} * $step) );
         $ball_rect->y( $ball_rect->y + ($ball->{v_y} * $step) );
 
         # collision to the bottom of the screen
         if ( $ball_rect->bottom >= $app->h ) {
             $ball_rect->bottom( $app->h );
             $ball->{v_y} *= -1;
         }
    
         # collision to the top of the screen
         elsif ( $ball_rect->top <= 0 ) {
             $ball_rect->top( 0 );
             $ball->{v_y} *= -1;
         }
   
   +     # collision to the right: player 1 score!
   +     elsif ( $ball_rect->right >= $app->w ) {
   +         $player1->{score}++;
   +         reset_game();
   +         return;
   +     }
   +
   +     # collision to the left: player 2 score!
   +     elsif ( $ball_rect->left <= 0 ) {
   +         $player2->{score}++;
   +         reset_game();
   +         return;
   +     }
     });

If the ball's right hits the right end of the screen (the app's width),
we increase player 1's score, call C<reset_game()> and return without
updating the ball's position. If the ball's left hits the left end of
the screen, we do the same for player 2.

We want the C<reset_game()> function called above to set the ball
back on the center of the screen, so let's make it happen:

   + sub reset_game {
   +     $ball->{rect}->x( $app->w / 2 );
   +     $ball->{rect}->y( $app->h / 2 );
   + }


=head2 Collision Detection: The Ball and The Paddle

We already learned how to do some simple collision detection, namely
between the ball and the edges of the screen. Now it's time to take it
one step further and figure out how to check whether the ball and the
paddles are overlapping one another (colliding, or rather, intersecting).
This is done via the Separating Axis Theorem, which roughly states that
two convex shapes in a 2D plane are B<not> intersecting if and only if we
can place a line separating them. Since our rect objects (the ball and
paddles) are both axis-aligned, we can simply pick one, and there will be
only 4 possible lines to test: its left, right, top and bottom. If the
other object is completely to the other side of any of those lines, then
there is B<no> collision. But if all four conditions are false,
they are intersecting.

To put it in more general terms, if we have 2 rects, A and B, we can
establish the following conditions, illustrated by the figure below:

=for figure
       \includegraphics[width=0.9\textwidth]{../src/images/collision.png}
        \caption{if B is completely to the left, right, top or bottom of A, they do NOT intersect}
         \label{fig:pong1}


=over 4

=item * if A's bottom side is above B's top side, then A is completely
above B (fig. 6.2.1).

=item * if A's top side is below B's bottom side, then A is completely
below B (fig. 6.2.2).

=item * if A's right side is to the left of B's left side, then A is
completely to the left of B (fig. 6.2.3).

=item * if A's left side is to the right of B's right side, then A is
completely to the right of B (fig 6.2.4).

=back

Keeping in mind that our origin point (0,0) in SDL is the top-left corner,
we can translate the rules above to the following generic
C<check_collision()> function, receiving two rect objects and returning
true if they collide:

   + sub check_collision {
   +     my ($A, $B) = @_;
   +
   +     return if $A->bottom < $B->top;
   +     return if $A->top    > $B->bottom;
   +     return if $A->right  < $B->left;
   +     return if $A->left   > $B->right;
   +
   +     # if we got here, we have a collision!
   +     return 1;
   + }

We can now use it in the ball's motion handler to see if it hits any
of the paddles:

     # handles the ball movement
     $app->add_move_handler( sub {
         my ( $step, $app ) = @_;
         my $ball_rect = $ball->{rect};
    
         $ball_rect->x( $ball_rect->x + ($ball->{v_x} * $step) );
         $ball_rect->y( $ball_rect->y + ($ball->{v_y} * $step) );
 
         # collision to the bottom of the screen
         if ( $ball_rect->bottom >= $app->h ) {
             $ball_rect->bottom( $app->h );
             $ball->{v_y} *= -1;
         }
    
         # collision to the top of the screen
         elsif ( $ball_rect->top <= 0 ) {
             $ball_rect->top( 0 );
             $ball->{v_y} *= -1;
         }
   
         # collision to the right: player 1 score!
         elsif ( $ball_rect->right >= $app->w ) {
             $player1->{score}++;
             reset_game();
             return;
         }
    
         # collision to the left: player 2 score!
         elsif ( $ball_rect->left <= 0 ) {
             $player2->{score}++;
             reset_game();
             return;
         }

   +     # collision with player1's paddle
   +     elsif ( check_collision( $ball_rect, $player1->{paddle} )) {
   +         $ball_rect->left( $player1->{paddle}->right );
   +         $ball->{v_x} *= -1;
   +     }
   +
   +     # collision with player2's paddle
   +     elsif ( check_collision( $ball_rect, $player2->{paddle} )) {
   +         $ball->{v_x} *= -1;
   +         $ball_rect->right( $player2->{paddle}->left );
   +     }
     });

That's it! If the ball hits player1's paddle, we reverse its horizontal
velocity (C<v_x>) to make it bounce back, and set its left edge to the
paddle's right so they don't overlap. Then we do the exact same thing
for the other player's paddle, except this time we set the ball's right
to the paddle's left - since the ball is coming from the other side.

=head2 Artificial Stupidity

Our Pong game is almost done now. We record the score, the ball bounces
around, we keep track of each player's score, and we can move the left
paddle with the up and down arrow keys. But this will be a very dull
game unless our nemesis moves too!

There are several complex algorithms to model artificial intelligence,
but we don't have to go that far for a simple game like this. What we're
going to do is make player2's paddle follow the ball wherever it goes,
by adding the following to its motion handler:

      # handles AI's paddle movement
      $app->add_move_handler( sub {
          my ( $step, $app ) = @_;
          my $paddle = $player2->{paddle};
          my $v_y = $player2->{v_y};

    +     if ( $ball->{rect}->y > $paddle->y ) {
    +         $player2->{v_y} = 1.5;
    +     }
    +     elsif ( $ball->{rect}->y < $paddle->y ) {
    +         $player2->{v_y} = -1.5;
    +     }
    +     else {
    +         $player2->{v_y} = 0;
    +     }

          $paddle->y( $paddle->y + ( $v_y * $step ) );
      });

If the ball's "C<y>" value (its top) is greater than the nemesis' paddle,
it means the ball is below it, so we give the paddle a positive velocity,
making it go downwards. On the other hand, if the ball has a lower "C<y>"
value, we set the nemesis' C<v_y> to a negative value, making it go up.
Finally, if the ball is somewhere in between those two values, we keep
the paddle still.


=head2 Cosmetics: Displaying the Score

How about we display the score so the player can see who's winning?
To render a text string in SDL, we're going to use the L<SDLx::Text>
module, so let's add it to the beginning of our code:

     use SDL;
     use SDL::Events;
     use SDLx::App;
     use SDLx::Rect;
   + use SDLx::Text;

Now we need to create the score object:

   + my $score = SDLx::Text->new( font => 'font.ttf', h_align => 'center' );

The C<font> parameter specifies the path to a TrueType Font. Here we are
loading the 'I<font.ttf>' file, so feel free to change this to whatever
font you have in your system. The C<h_align> parameter lets us choose
a horizontal alignment for the text we put in the object. It defaults to
'I<left>', so we make it 'I<center>' instead.

All that's left is using this object to write the score on the screen,
so we update our 'show' handler:

      $app->add_show_handler(
          sub {
              # first, we clear the screen
              $app->draw_rect( [0, 0, $app->w, $app->h], 0x000000FF );
      
              # then we render the ball
              $app->draw_rect( $ball->{rect}, 0xFF0000FF );
      
              # ... and each paddle
              $app->draw_rect( $player1->{paddle}, 0xFF0000FF );
              $app->draw_rect( $player2->{paddle}, 0xFF0000FF );
      
    +         # ... and each player's score!
    +         $score->write_to(
    +             $app,
    +             $player1->{score} . ' x ' . $player2->{score}
    +         );

              # finally, we update the screen
              $app->update;
          }
      );

The C<write_to()> call will write to any surface passed as the first
argument - in our case, the app itself. The second argument, as you
probably figured, is the string to be rendered. Note that the string's
position is relative to the surface it writes to, and defaults to
(0,0). Since we told it to center horizontally, it will write our text
to the top/center, instead of top/left.

The result, and our finished game, can be seen on the figure below:

=for figure
       \includegraphics[width=0.5\textwidth]{../src/images/pong2.png}
        \caption{our finished Pong clone, in all its glory}
         \label{fig:pong2}


=head2 Exercises

=over 4

=item 1. Every time a player scores, the ball goes back to the middle but
has the same sense and direction as before. See if you can make it restart
at a random direction instead.

=item 2. Red is boring, you want to make a completely psychedelic Pong! Pick
3 different colours and make each paddle oscillate between them every time
the ball hits it.

=back

See if you can solve the exercises above by yourself, to make sure you
understand what is what and how to do things in SDL Perl. Once you're done,
check out the answers below. Of course, there's always more than one way to
do things, so the ones below are not the only possible answers.

=head3 Answers

1. To make the ball restart at a random direction, we can improve our
C<reset_game()> function to set the ball's C<v_x> and C<v_y> to a random
value between, say, 1.5 and 2.5, or -1.5 and -2.5:

     sub reset_game {
         $ball->{rect}->x( $app->w / 2 );
         $ball->{rect}->y( $app->h / 2 );

   +     $ball->{v_x} = (1.5 + int rand 1) * (rand 2 > 1 ? 1 : -1);
   +     $ball->{v_y} = (1.5 + int rand 1) * (rand 2 > 1 ? 1 : -1);
     }

2. We can either choose one colour set for both paddles or one for each.
Let's go with just one set, as an array of hex values representing our colours.
We'll also hold the index for the current colour for each player:

    + my @colours = qw( 0xFF0000FF 0x00FF00FF 0x0000FFFF 0xFFFF00FF );

      my $player1 = {
           paddle => SDLx::Rect->new( 10, $app->h / 2, 10, 40),
           v_y    => 0,
           score  => 0,
    +      colour => 0,
      };

      my $player2 = {
           paddle => SDLx::Rect->new( $app->w - 20, $app->h / 2, 10, 40),
           v_y    => 0,
           score  => 0,
    +      colour => 0,
      };

Next we make it update the C<colour_id> every time the ball hits the paddle:

     # handles the ball movement
     $app->add_move_handler( sub {
         my ( $step, $app ) = @_;
         my $ball_rect = $ball->{rect};
    
         $ball_rect->x( $ball_rect->x + ($ball->{v_x} * $step) );
         $ball_rect->y( $ball_rect->y + ($ball->{v_y} * $step) );
 
         # collision to the bottom of the screen
         if ( $ball_rect->bottom >= $app->h ) {
             $ball_rect->bottom( $app->h );
             $ball->{v_y} *= -1;
         }
    
         # collision to the top of the screen
         elsif ( $ball_rect->top <= 0 ) {
             $ball_rect->top( 0 );
             $ball->{v_y} *= -1;
         }
   
         # collision to the right: player 1 score!
         elsif ( $ball_rect->right >= $app->w ) {
             $player1->{score}++;
             reset_game();
             return;
         }
    
         # collision to the left: player 2 score!
         elsif ( $ball_rect->left <= 0 ) {
             $player2->{score}++;
             reset_game();
             return;
         }

         # collision with player1's paddle
         elsif ( check_collision( $ball_rect, $player1->{paddle} )) {
             $ball_rect->left( $player1->{paddle}->right );
             $ball->{v_x} *= -1;
   +         $player1->{colour} = ($player1->{colour} + 1) % @colours;
         }
    
         # collision with player2's paddle
         elsif ( check_collision( $ball_rect, $player2->{paddle} )) {
             $ball->{v_x} *= -1;
             $ball_rect->right( $player2->{paddle}->left );
   +         $player2->{colour} = ($player2->{colour} + 1) % @colours;
         }
     });

Finally, we change our 'show' handler to use the current colour referenced by
C<colour_id>, instead of the previously hardcoded red (0xFF0000FF):

      $app->add_show_handler(
          sub {
              # first, we clear the screen
              $app->draw_rect( [0, 0, $app->w, $app->h], 0x000000FF );
      
              # then we render the ball
              $app->draw_rect( $ball->{rect}, 0xFF0000FF );
      
              # ... and each paddle
    -         $app->draw_rect( $player1->{paddle}, 0xFF0000FF );
    +         $app->draw_rect( $player1->{paddle}, $colours[ $player1->{colour} ] );
    -         $app->draw_rect( $player2->{paddle}, 0xFF0000FF );
    +         $app->draw_rect( $player2->{paddle}, $colours[ $player2->{colour} ] );
  
              # ... and each player's score!
              $score->write_to(
                  $app,
                  $player1->{score} . ' x ' . $player2->{score}
              );

              # finally, we update the screen
              $app->update;
          }
      );


=head1 Author

This chapter's content graciously provided by Breno G. de Oliveira (C<garu>).

=for vim: spell
