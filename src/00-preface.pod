=head0 Preface

I<Simple DirectMedia Layer> (or I<libsdl>) is a cross-platform C library that
provides access to several input and output devices. Its most popular usage is
to provide access to the video framebuffer and input devices for games. SDL
also has several extension libraries to provide features such as text display,
sound mixing, image handling, and graphics effects.

SDL Perl binds several of these libraries together in the C<SDL::*> namespace.
Moreover, SDL Perl provides several high-level libraries in the C<SDLx::*>
namespace that encapsulate valuable game-writing abstractions.

=head1 C<SDL> and C<SDLx>

The main purpose of the C<SDLx::*> layer is to smooth out the drudgery of using
the C<SDL::*> layer directly.

=for sidebar

Don't worry about understanding the details of this code right now. Compare the
complexity and size of the code listings.

=end sidebar

Using the C<SDL::*> layer to draw a blue rectangle looks something like:

=begin programlisting

    use SDL;
    use SDL::Video;
    use SDL::Surface;
    use SDL::Rect;

    # the size of the window box or the screen resolution if fullscreen
    my $screen_width   = 800;
    my $screen_height  = 600;

    SDL::init(SDL_INIT_VIDEO);

    # setting video mode
    my $screen_surface = SDL::Video::set_video_mode($screen_width,
                                                    $screen_height,
                                                    32,
                                                    SDL_ANYFORMAT);

    # drawing a rectangle with the blue color
    my $mapped_color   = SDL::Video::map_RGB($screen_surface->format(),
                                              0, 0, 255);
    SDL::Video::fill_rect($screen_surface,
                          SDL::Rect->new($screen_width / 4, $screen_height / 4,
                                         $screen_width / 2, $screen_height / 2),
                          $mapped_color);

    # update an area on the screen so it's visible
    SDL::Video::update_rect($screen_surface, 0, 0,
                            $screen_width, $screen_height);

    # just to have time to see it
    sleep(5);

=end programlisting

... while drawing a blue rectangle in the C<SDLx::*> layer is as simple as:

=begin programlisting

    use strict;
    use warnings;

    use SDL;
    use SDLx::App;

    my $app = SDLx::App->new( width=> 800, height => 600 );

    $app->draw_rect([ $app->width / 4, $app->height / 4,
                      $app->width / 2, $app->height / 2, ],
                      [ 0, 0, 255, 255] );

    $app->update();

    sleep(5);

=end programlisting

The C<SDLx::*> modules also provide and manage higher-level concerns for users, such as layers and game loops.

=head1 About the Book

This book has a two-fold purpose: first, to introduce game development to Perl
programmers, and second, to introduce Modern Perl concepts through game
development.  While the examples assume some experience with Perl, no
experience with SDL in Perl or as C<libsdl> itself is necessary.

The book presents a progression from simple to intermediate examples and
provides suggestions for more advanced endeavors. The chapters of this book
increase progressively in complexity, but each chapter has a singular goal
(such as chapter five's I<Making Pong>) which stands alone as an individual
tutorial.  Sources and data files are all available from
U<http://sdl.perl.org/>.

=head1 Installing SDL Perl

We assume the presence of a recent version of the Perl language (at least Perl
5.10) and supporting packages. We also assume that you can install packages
from the CPAN, including SDL Perl itself.

=head2 Windows

C<Alien::SDL> will install binaries for 32bit and 64bit so there is no need
to compile anything.

=head2 Mac OS X

Fink has packages for SDL Perl available. However, they do not support Pango, a
library which provides internalization support for text handling.

Installing C<Alien::SDL> from the CPAN will compile SDL and its dependencies,
provided you have installed severan necessary dependencies. We recommend that
you install C<libfreetype6>, C<libX11>, C<libvorbis>, C<libogg>, C<libpng>, and
their headers.

=head2 GNU/Linux

Most current GNU/Linux distributions include all the parts needed for this
tutorial in the default install and in their package management system.  It is
also always possible to install on GNU/Linux using the available open source
code from the proper repositories. The C<Alien::SDL> perl module automates much
of downloading, compiling, and installing the needed libraries.

You can probably use your distribution's packages. On Ubuntu and Debian try:

    $ sudo apt-get install libsdl-net1.2-dev libsdl-mixer1.2-dev \
    libsdl1.2-dev libsdl-image1.2-dev libsdl-ttf2.0-dev \
    libsdl-gfx1.2-dev libsdl-pango-dev

To compile from scratch, you must install a compiler, system header packages,
and some libraries are required.

    $ sudo apt-get install build-essential xorg-dev libx11-dev libxv-dev \
    libpango1.0-dev libfreetype6-dev libvorbis-dev libpng12-dev \
    libogg-dev

=head2 CPAN install

Before installing SDL Perl, ensure that you have the most recent versions of
the modules necessary to build SDL:

    $ sudo cpan CPAN
    $ sudo cpan YAML Module::Build

After these two steps CPAN will be able to install SDL:

    $ sudo cpan SDL

For most platforms a CPAN install will suffice. Supported and tested
platforms are listed at U<http://pass.cpantesters.org/distro/S/SDL.html>.

=head1 Contact

Hopefully this book answers most of your questions. For additional assistance,
contact the project via:

=over 4

=item * I<the web>, by visiting the SDL Perl homepage at
U<http://sdl.perl.org/>.

=item * I<IRC>, in the C<#sdl> channel on C<irc.perl.org>. This is a very
active and helpful resource.

=item * I<email>, through the C<sdl-devel@perl.org> mailing list.

=back

=head1 Examples

The code examples in this book are available from
U<https://github.com/PerlGameDev/SDL_Manual/tree/master/code_listings>.

=head1 Acknowledgements

Thanks to contributors and reviewers from the C<#sdl> channel, including:

=over

=item Alias

=item bobross

=item Blaizer

=item cfedde

=item chromatic

=item FROGGS

=item garu

=item jamesw

=item perlpilot

=item PerlJam

=item Pip

=item waxhead

=item and many more

    (Apologies if I have missed you; let me know and I will add you.)

=back
