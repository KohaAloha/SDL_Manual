=head0 Tetris

Pong is an important milestone in gaming history. If you can write it, you understand the basics of game programming. The next step in mastery comes from writing something like Tetris, with better animation and more complex scoring.

=for figure
       \includegraphics[width=0.5\textwidth]{../src/images/tetris.png}
        \caption{Tetris using SDLx Perl}
         \label{fig:tetris}

To follow along, download the sample code from
U<https://github.com/PerlGameDev/SDL_Manual/raw/master/games/tetris.zip>. To
start the game, extract this Zip file and run:

=begin screen

	$ B<perl tetris.pl>

=end screen

=head1 The Game Window

The game starts out as you should expect by now:

=begin programlisting

    use strict;
    use warnings;

    use SDL;
    use SDL::Event;
    use SDL::Events;
    use SDLx::App;

    # create the main screen
    my $app = SDLx::App->new(
       w            => 400,
       h            => 512,
       exit_on_quit => 1,
       dt           => 0.2,
       title        => 'SDLx Tetris'
    );

=end programlisting

This game requires several pieces of artwork, and so the program must manage
and store them somehow. The C<SDLx::Surface> module handles the conversion of
files from their storage on disk into a format SDL can use, and an array will
hold them:

=begin programlisting

     use SDL;
     B<< use SDLx::Surface; >>
	
	...
		
     B<< my $back  = SDLx::Surface->load( 'data/tetris_back.png' ); >>
     B<< my @piece = (undef); >>
     B<< push @piece, SDLx::Surface->load( "data/tetris_$_.png" ) for 1..7; >>

=end programlisting

The C<$back> variable holds one special surface: the background image.
Everything else is in the C<@piece> array.

=head1 Managing Blocks

Blocks are critical to the success of a Tetris game. The program must represent
them in a sensible way: they must be easy to access and they must be easy to
manipulate and calculate. A hash fulfills the ease of access:

=begin programlisting

    my %pieces = (
      I => [0, 5, 0, 0,
            0, 5, 0, 0,
            0, 5, 0, 0,
            0, 5, 0, 0],
      J => [0, 0, 0, 0,
            0, 0, 6, 0,
            0, 0, 6, 0,
            0, 6, 6, 0],
      L => [0, 0, 0, 0,
            0, 2, 0, 0,
            0, 2, 0, 0,
            0, 2, 2, 0],
      O => [0, 0, 0, 0,
            0, 3, 3, 0,
            0, 3, 3, 0,
            0, 0, 0, 0],
      S => [0, 0, 0, 0,
            0, 4, 4, 0,
            4, 4, 0, 0,
            0, 0, 0, 0],
      T => [0, 0, 0, 0,
            0, 7, 0, 0,
            7, 7, 7, 0,
            0, 0, 0, 0],
      Z => [0, 0, 0, 0,
            1, 1, 0, 0,
            0, 1, 1, 0,
            0, 0, 0, 0],
    );

=end programlisting

Each hash entry holds a four-element array reference which represents a grid of
the piece. Each item in the array corresponds to an image in the C<@piece>
array. Drawing a piece means blitting one element of C<@piece> for each
non-zero entry in the piece's array.



=begin programlisting

     use strict;
     use warnings;

    B<< use List::Util qw(shuffle min max); >>

=end programlisting

X<C<List::Util>>

Selecting pieces needs some randomness. The core C<List::Util> module can help:

=begin programlisting

         Z => [0,0,0,0,
               1,1,0,0,
               0,1,1,0,
               0,0,0,0],
     );

     B<< my $next_tile           = get_next_tile(); >>
     B<< my $curr_tile           = [ undef, 4, 0 ]; >>
        B<< @{ $curr_tile->[0] } = @{ $pieces{$next_tile} }; >>
        B<< $next_tile           = get_next_tile() >>

	B<< sub get_next_tile { shuffle keys %pieces }; >>

=end programlisting

This code randomly chooses a C<$next_tile>, then sets the piece data for the
first piece in C<$curr_tile>.

=head1 Piece Collisions

Collision detection is both easier (because only one piece at a time moves) and
more difficult (because the screen continues to fill up with pieces). One
solution is to treat the screen as two overlapping grids. The first grid
represents the moving piece. The second grid represents the pieces already in
place. When a moving piece collides with a piece in the fixed grid, the moving
piece becomes stationary and joins the fixed grid. When that action clears one
or more lines, the stationary grid changes.

Start by defining these grids:

=begin programlisting

     push @piece, SDLx::Surface->load( "data/tetris_$_.png" ) for 1..7;

     B<< # compare the position of the moving piece with non-moving pieces >>
     B<< my $grid   = []; # moving piece >>
     B<< my $store  = []; # non-moving pieces >>

     my %pieces = (
          I => [0,5,0,0,

=end programlisting

Rotating a piece means transforming each of its elements:

=for author

This math needs some explanation for everyone who hasn't done linear algebra in
a while.

=end for

=begin programlisting

    sub rotate_piece {
        my $_piece   = shift;
        my $_rotated = [];
        my $_i       = 0;

        for (@{$_piece}) {
            $_rotated->[ $_i + (($_i % 4 + 1 ) * 3)
                             - ( 5 * int( $_i / 4 ))] = $_;
            $_i++;
        }

        return $_rotated;
    }

=end programlisting

Collision detection requires checking both grids for a piece overlap in the
direction the user wants to move the piece:

=for author

The math concern applies here too. A diagram might help.

=end for

=begin programlisting

    sub can_move_piece {
        my $direction = shift;
        my $amount    = shift || 1;

        for my $y (0 .. 3) {

            for my $x (0 . .3) {
                if ($curr_tile->[0]->[ $x + 4 * $y ]) {
                    return if $direction eq 'left'
                             && $x - $amount + $curr_tile->[1]  < 0;
                    return if $direction eq 'right'
                             && $x + $amount + $curr_tile->[1]  > 9;
                    return if $direction eq 'down'
                             && int($y + $amount + $curr_tile->[2]) > 22;
    
                    return if $direction eq 'right'
                             && $store->[ $x + $amount     +
                                           $curr_tile->[1] +
                                           10 * int($y + $curr_tile->[2]) ];
                    return if $direction eq 'left'
                             && $store->[ $x - $amount     +
                                           $curr_tile->[1] +
                                           10 * int($y + $curr_tile->[2]) ];
                    return if $direction eq 'down'
                             && $store->[ $x +
                                           $curr_tile->[1]
                                           + 10 * int($y + $amount +
                                           $curr_tile->[2]) ];
                }
            }
        }

        return 1;
    }

=end programlisting

All of the pieces are in place to move the piece: make the collision check,
then place the piece into the appropriate grid for its next position:

=begin programlisting

    sub move_piece {
        my $direction = shift;
        my $amount    = shift || 1;

        if ($direction eq 'right') {
            $curr_tile->[1] += $amount;
        }
        elsif ($direction eq 'left') {
            $curr_tile->[1] -= $amount;
        }
        elsif ($direction eq 'down') {
            $curr_tile->[2] += $amount;
        }

        @{$grid} = ();

        for my $y (0..3) {
            for my $x (0..3) {
                if ($curr_tile->[0]->[$x + 4 * $y]) {
                    $grid->[ $x + $curr_tile->[1] +
                             10 * ($y + int($curr_tile->[2])) ]
                              = $curr_tile->[0]->[$x + 4 * $y];
                }
            }
        }
    }

    sub store_piece {
        for my $y (0..3) {
            for my $x (0..3) {
                if ($curr_tile->[0]->[$x + 4 * $y]) {
                    $store->[ $x + $curr_tile->[1] + 10 *
                             ($y + int($curr_tile->[2])) ]
                              = $curr_tile->[0]->[$x + 4 * $y];
                }
            }
        }
    }

=end programlisting

Of course this all needs an event handler to attempt to move the pieces
appropriately:

=begin programlisting

    sub trigger_move_event_handler {
        my ( $event, $app ) = @_;

        if ( $event->type == SDL_KEYDOWN ) {
            my $key = $event->key_sym;

            if ( $event->key_sym & (SDLK_LEFT|SDLK_RIGHT|SDLK_UP|SDLK_DOWN) ) {
                if ($key == SDLK_LEFT && can_move_piece('left')) {
                    move_piece('left');
                }
                elsif ($key == SDLK_RIGHT && can_move_piece('right')) {
                    move_piece('right');
                }
                elsif ($key == SDLK_DOWN && can_move_piece('down')) {
                    move_piece('down')
                }
                elsif ($key == SDLK_UP) {
                    $curr_tile->[0] = rotate_piece($curr_tile->[0]);
                }
            }
        }
    }

    $app->add_event_handler( \&trigger_move_event_handler );

=end programlisting

=head2 Score and Game State

First we keep hold a variable to keep the game score and set the C<SDLx::Text> font and options 
to draw the text on the screen later on. 

=begin programlisting

	use SDLx::App;
	B<< use SDLx::Text; >>
	use SDLx::Rect;

	...
	
	# create our game objects
	B<< my $score_text = SDLx::Text->new( font => 'font.ttf', >>
					B<<	h_align => 'left',  >>
					B<<	color => [255,255,255,255] ); >>
	B<<	my $score      = 0; >>
	my $back       = SDLx::Surface->load( 'data/tetris_back.png' );



=end programlisting 

The game state in Tetris is the combination of the fixed placement grid, the current piece, and the current score. The move handler can update all of these:

=begin programlisting

    $app->add_move_handler( sub {
        my ( $step, $app ) = @_;

=end programlisting

Start by updating the current piece's state as movable or fixed:

=begin programlisting

        if (can_move_piece('down', $step / 2)) {
            # still movable
            move_piece('down', $step / 2);
        }
        else {
            # place the tile
            store_piece($curr_tile);

=end programlisting

Then update the state of the grid and check for lines to remove:

=for author

Why count backwards? This seems like it could be C<for my $y (0 .. 22)>. Maybe
the question is whether to remove rows from the bottom up or the top down.

=end for

=begin programlisting

            # checking for lines to delete
            my $y;
            my @to_delete);

            for($y = 22; $y >= 0; $y--) {
                # if the min value of this row is 0,
                # it contains at least one open space
                if (min( @{$store}[ ($y * 10)..((( $y + 1) *10 ) -1 )])) {
                    push @to_delete, $y;
                }
            }

=end programlisting

Deleting a line should increment the user's score:

=begin programlisting

            # deleting lines
            foreach (@to_delete) {
                splice @{$store}, $_ * 10, 10;
                $score++;
            }

=end programlisting

... and should clear that line off of the fixed grid:

=for author

These loops should merge.

=end for

=begin programlisting

            # adding blank rows to the top
            foreach (@to_delete) {
                splice @{$store}, 0, 0, (0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            }
    

=end programlisting

... and the game should launch a new tile.

=begin programlisting

            # launching new tile
            @{$curr_tile->[0]}  = @{ $pieces{$next_tile} };
            $curr_tile->[1]     = 4;
            $curr_tile->[2]     = 0;
            $next_tile          = shuffle keys %pieces;
        }
    });

=end programlisting

=head2 Drawing the Game

Those are the mechanics. How about displaying the game? The show handler needs
to iterate through all of the elements in both grids and draw the appropriate
tile:

=begin programlisting

    $app->add_show_handler(
        sub {
            # first clear the screen
            $app->draw_rect( [ 0, 0, $app->w, $app->h ], 0x000000 );

            # and draw the background image
            $back->blit( $app );
            my $x = 0;
            my $y = 0;

            # draw the fixed tiles
            foreach (@{$store}) {
                $piece[$_]->blit( $app,
                                   undef,
                                  [ 28 + $x%10 * 20, 28 + $y * 20 ]
                                ) if $_;
                $x++;
                $y++ unless $x % 10;
            }

            $x = 0;
            $y = 0;

            # draw the moving tile
            foreach (@{$grid}) {
                $piece[$_]->blit( $app, undef,
                    [ 28 + $x % 10 * 20, 28 + $y * 20 ] ) if $_;
                $x++;
                $y++ unless $x % 10;
            }

            # the next tile will be...
            my $next_tile_index = max( @{$pieces{$next_tile}} );
            for $y (0..3) {
                for $x (0..3) {
                    if ($pieces{$next_tile}->[$x + 4 * $y]) {
                        $piece[$next_tile_index]->blit( $app, undef,
                                                        [ 264 + $x * 20,
                                                           48 + $y * 20 ]
                                                      );
                    }
                }
            }

=end programlisting

... and should draw the score:

=begin programlisting

            $score_text->write_xy( $app, 248,  20, "Next Piece" );
            $score_text->write_xy( $app, 248, 240, "Score: $score" );

            # finally, update the screen
            $app->update;
        }
    );

    # all is set, run the app!
    $app->run();

=end programlisting

=head1 Author

Code for this chapter was provided by Tobias Leich "FROGGS".

=for vim: spell
