=head0 Pixel Effects

In this chapter we will look at how to use pixel effects in Perl. Pixel effects are operations that are done directly on the bacnk of a C<SDL_Surface>'s pixel. These effects are used to do visual effects in games and applications, most notably by C<Frozen Bubble>.

=for figure
       \includegraphics[h!][width=0.5\textwidth]{../src/images/effects.png}
        \caption{Snow Effect covering Frozen Bubble's Logo }
         \label{fig:frozen_bubble}

These effects can be done in purely in Perl, for 1 passes and non real time applications. Effects that need to be done real time will have to be done in C via XS. This chapter will show two methods of doing this.

=head1 Sol's Ripple Effect

For our first pixel effect we will be doing is a ripple effect from a well known SDL resource, U<http://sol.gfxile.net/gp/ch02.html>. This effects uses C<SDL::get_ticks> to animate a ripple effect across the surface as seen at \fig{fig:ripple}.   

=for figure
       \includegraphics[width=0.5\textwidth]{../src/images/xs_effects.png}
        \caption{Sol's Chapter 01 Ripple Effect}
         \label{fig:ripple}

=head2 Pure Perl

First lets make the effect in pure perl. To do any operations with a C<SDL::Surface> we must do C<SDL::Video::lock_surface()> call as seen below. 
Locking the surface prevents other process in SDL from accessing the surface. The surface pixels can be accessed several ways from Perl. Here we are 
using the C<SDL::Surface::set_pixels> which takes an offset for the C<SDL_Surface> pixels array, and sets a value there for us. The actual
pixel effect is just a time dependent (using C<SDL::get_ticks> for time) render of a function. See U<http://sol.gfxile.net/gp/ch02.html> for a deeper explanation.

=begin programlisting

    use strict;
    use warnings;

    use SDL;
    use SDLx::App;

	# Render callback that we use to fiddle the colors on the surface
    sub render {
        my $screen = shift;
        if ( SDL::Video::MUSTLOCK($screen) ) {
            return if ( SDL::Video::lock_surface($screen) < 0 );
        }

        my $ticks = SDL::get_ticks();
        my ( $i, $y, $yofs, $ofs ) = ( 0, 0, 0, 0 );
        for ( $i = 0; $i < 480; $i++ ) {
            for ( my $j = 0, $ofs = $yofs; $j < 640; $j++, $ofs++ ) {
                $screen->set_pixels( $ofs, ( $i * $i + $j * $j + $ticks ) );
            }
            $yofs += $screen->pitch / 4;
        }


        SDL::Video::unlock_surface($screen) if ( SDL::Video::MUSTLOCK($screen) );

        SDL::Video::update_rect( $screen, 0, 0, 640, 480 );

        return 0;
    }


    my $app = SDLx::App->new( width => 640, height => 480, eoq => 1, title => "Grovvy XS Effects" );

    $app->add_show_handler( sub{ render( $app ) } );

    $app->run();

=end programlisting  

One you run this program you will find it pretty much maxing out the CPU and not running very smoothly. At this point running a loop through the entire pixel bank of a C<640x480> sized
screen is too much for Perl. We will need to move the intensive calculations to C<C>.

=head2 Inline Effects
X<Inline>

In the below example we use C<Inline> to write inline C<C> code to handle the pixel effect for us. C<SDL> now provides support to work with C<Inline>.
The C<render> callback is now moved to C<C> code, using C<Inline C>. When the program first runs it will compile the code and link it in for us.  

=begin programlisting

    use strict;
    use warnings;
    use Inline with => 'SDL';
    use SDL;
    use SDLx::App;


    my $app = SDLx::App->new( width => 640, height => 480, eoq => 1, title => "Grovvy XS Effects" );

    $app->add_show_handler( sub{ render( $app ) } );

    $app->run();

    use Inline C => <<'END';

    void render( SDL_Surface *screen )
    {   
        // Lock surface if needed
        if (SDL_MUSTLOCK(screen)) 
            if (SDL_LockSurface(screen) < 0) 
                return;

        // Ask SDL for the time in milliseconds
        int tick = SDL_GetTicks();

        // Declare a couple of variables
        int i, j, yofs, ofs;

        // Draw to screen
        yofs = 0;
        for (i = 0; i < 480; i++)
        {
            for (j = 0, ofs = yofs; j < 640; j++, ofs++)
            {
                ((unsigned int*)screen->pixels)[ofs] = i * i + j * j + tick;
            }
            yofs += screen->pitch / 4;
        }

        // Unlock if needed
        if (SDL_MUSTLOCK(screen)) 
            SDL_UnlockSurface(screen);

        // Tell SDL to update the whole screen
        SDL_UpdateRect(screen, 0, 0, 640, 480);    
    }

    END


=end programlisting

=head1 Modules

Making it usable at least.

=for vim: spell
