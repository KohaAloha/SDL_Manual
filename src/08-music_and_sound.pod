=head0 Sound and Music

Sound and Music in SDL is handled by the C<Audio> and C<SDL_Mixer> components. Enabling C<Audio> devices is provided with the Core SDL Library and only supports wav files. C<SDL_Mixer> supports more audio file formats and has additional features that we need for sound in Game Development. 

Similarly to video in SDL, there are several way for perl developers to access the Sound components of SDL. For the plain C<Audio> component the C<SDL::Audio> and related modules are available. C<SDL_Mixer> is supported with th C<SDL::Mixer> module. There is currently a C<SDLx::Sound> module in the work, but not completed at the time of writing this manual. For that reason this chapter will use C<SDL::Audio> and C<SDL::Mixer>.  

=head1 Setting Up the Audio Devices

To begin using sound we must enable and open an audiospec:

	use strict;
	use warnings;
	use SDL;
	use Carp;
	use SDL::Audio;
	use SDL::Mixer;
	
	SDL::init(SDL_INIT_AUDIO);
	
	unless( SDL::Mixer::open_audio( 44100, AUDIO_S16SYS, 2, 4096 ) == 0 )
	{
		Carp::croak "Cannot open audio: ".SDL::get_error(); 
	}
	

C<open_audio> will open an audio device with frequency at 44100 Mhz, audio format AUDIO_S16SYS (Note: This is currently the most portable format, however there are others), 2 channels and a chunk size of 4096. Fiddle with these values if you are comfortable with sound terminology and techniques. 

=head1 Loading Samples

Next we will load sound samples that generally used for sound effects and the like. Currently C<SDL_Mixer> reserves samples for C<.WAV>, C<.AIFF>, C<.RIFF>  C<.OGG>, and C<.VOC> formats. 

Samples run on one of the 2 channels that we opened up, while our background music will run on the other channels. To load samples we will be doing the following:

	+use SDL::Mixer::Samples;

	+#Brillant Lazer Sound from U<http://www.freesound.org/samplesViewSingle.php?id=30935>
	+my $sample = SDL::Mixer::Samples::load_WAV('data/sample.wav');

	+unless($sample)
	+{
	+	Carp::croak "Cannot load file data/sample.wav: ".SDL::get_error();	
	+}

=head1 Playing the sample and closing audio

Now we can play that sample on any open channel looping forever:

	 use SDL::Mixer::Samples;
	+use SDL::Mixer::Channels;
	
	my $sample =  SDL::Mixer::Samples::load_WAV('data/sample.wav');
	unless( $sample)
	{
		Carp::croak "Cannot load file data/sample.wav: ".SDL::get_error(); 
	}

	+my $playing_channel = SDL::Mixer::Channels::play_channel( -1, $sample, 0 );

C<play_channel> allows us to assign a sample to the channel C<-1> which indicates any open channel. C<0> indicates we want to play the sample only once.

Note that since the sound will be playing in an external process we will need to keep the perl script running. In a game this is no problem but for a single script like this we can just use a simple C<sleep> function. Once we are done we can go ahead and close the audio device.

	+sleep(1);
	+SDL::Mixer::close_audio();

=head1 Streaming Music

Next we will use C<SDL::Mixer::Music> to add a background music to our script here. 

	 use SDL::Mixer::Channels;
    +use SDL::Mixer::Music;

	+#Load our awesome music from U<http://8bitcollective.com>
	+my $background_music = SDL::Mixer::Music::load_MUS('data/music/01-PC-Speaker-Sorrow.ogg');


	+unless( $background_music )
	+{
	+	Carp::croak "Cannot load music file data/music/01-PC-Speaker-Sorrow.ogg: ".SDL::get_error() ;
	+}

Music types in C<SDL::Mixer> run in a seperate channel from our samples which allows us to have sound effects (like jump, or lasers etc) to play at the same time. 

	+SDL::Mixer::Music::play_music($background_music,0); 

C<play_music> also takes a parameter for how many loops you would like to play the song for, where 0 is 1. 

To stop the music we can call C<halt_music>.

	 sleep(2);
	+SDL::Mixer::Music::halt_music();
	 SDL::Mixer::close_audio();

=head1 Volume Control

Controlling Volume can be as simple as:
	
	#All channels indicated by the -1
	SDL::Mixer::Channels::volume(-1,10); 

	#Specifically for the Music
	SDL::Mixer::Music::volume_music( 10 );

Volumes can be set at anytime and range from C<1-100>. 

=head1 Mixer Effects

Making a dynamic spectrograph. 

=for figure 
       \includegraphics[width=0.5\textwidth]{../src/images/spectro-1.png}      
        \caption{A Spectrogrpah of an awesome song}               
         \label{fig:spectro}   


=begin sidebar

The songs provided with this chapters code have been used by the talent authors on U<http://8bitcollective.com>. To see the individual credits of each song have a look at C<data/music/Songs>. This is truly a great site for game songs, but please give all artists their due credits. 


=end sidebar

=head1 Modules

=head2 C<SDLx::Sound>

Simple SDL Mixer initialization.

=head2 C<SDL::Audio>

Creating music on the fly.

=head2 C<SDL::Mixer>

Full fledge music support.

=for vim: spell
