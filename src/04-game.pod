=head0 The Game Loop 

=head1 Simplest Game Loop

The simplest game loop can be boiled down to the following. 

=for programlisting

    while(!$quit)
    {
       get_events();
       calculate_next_positions();
       render();
    }

=for programlisting

In C<get_events()> we get events from what input devices that we need. It is important to process events first to prevent lag.
In C<calculate_next_positions> we update the game state according to animations and the events captured. In C<render()> we will update the screen and show the game to the player. 

A practical example of this is a moving Lazer. 

    use strict;
    use warnings;
    use SDL;
    use SDL::Event;
    use SDL::Events;
    use SDLx::App;
    
    my $app = SDLx::App->new( 
                             width=> 200, height => 200,
                             title=> 'Pew Pew'
                            );

    #Don't need to quit yet
    my $quit = 0;
    #Start lazer on the left
    my $lazer = 0;
    sub get_events{ 

                    my $event = SDL::Event->new();
                    
                    #Pump the event queue
                    SDL::Events::pump_events;

                    while( SDL::Events::poll_event($event) )
                    {
                        $quit = 1 if $event->type == SDL_QUIT  
                    }
                  }

    sub calculate_next_positions{
        $lazer++;
    }
    
    sub render { 
        
        #Draw the background first
        $app->draw( [0,0,$app->w, $app->h], 0 );

        #Draw the lazer
        $app->draw( [$lazer, $app->h/2, 10, 2], [255,0,0,255]);

        $app->update();

    }

    while(!$quit)
    {
         get_events();
         calculate_next_positions();
         render();
    }

=head2 Issues

This game loop works really well for consoles and devices where the CPU clock speed is always known. All of your user will be using the 
processor to run this code. This means that each animation and calculation will happen at the exact same time in each machine. This is
a critical assumption when we have users with various CPU clock speeds. For faster CPU this means that all animations, calculations and 
generally the whole game will be really fast, and hard for the user to play.

=head1 Fixed FPS

One way to solve this problem is to fix the Frames Per Second your game runs at. The frame is defined by each new redraw of the screen.



=head2 Problems

Nah ....

=head1 Variable FPS

Lets try this one.

=head2 Problems

Ugh ...

=head1 Integrating Physics

Looks goods

=head2 Problems

but ok.

=head1 Learn More

=for vim: spell
