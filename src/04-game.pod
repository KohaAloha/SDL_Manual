=head0 The Game Loop 

=head1 Simplest Game Loop

The simplest game loop can be boiled down to the following. 

=begin programlisting

    while(!$quit)
    {
       get_events();
       calculate_next_positions();
       render();
    }

=end programlisting

In C<get_events()> we get events from what input devices that we need. It is important to process events first to prevent lag.
In C<calculate_next_positions> we update the game state according to animations and the events captured. In C<render()> we will update the screen and show the game to the player. 

A practical example of this is a moving laser bolt. 

=begin programlisting

    use strict;
    use warnings;
    use SDL;
    use SDL::Event;
    use SDL::Events;
    use SDLx::App;
    
    my $app = SDLx::App->new( 
                             width=> 200, height => 200,
                             title=> 'Pew Pew'
                            );

    #Don't need to quit yet
    my $quit = 0;
    #Start laser on the left
    my $laser = 0;
    sub get_events{ 

                    my $event = SDL::Event->new();
                    
                    #Pump the event queue
                    SDL::Events::pump_events;

                    while( SDL::Events::poll_event($event) )
                    {
                        $quit = 1 if $event->type == SDL_QUIT  
                    }
                  }

    sub calculate_next_positions{
	# Move the laser over
        $laser++;
	# If the laser goes off the screen bring it back
	$laser = 0 if $laser > $app->w();

    }
    
    sub render { 
        
        #Draw the background first
        $app->draw_rect( [0,0,$app->w, $app->h], 0 );

        #Draw the laser, in the middle height of the screen
        $app->draw_rect( [$laser, $app->h/2, 10, 2], [255,0,0,255]);

        $app->update();

    }


    # Until we quit stay looping 
    while(!$quit)
    {
         get_events();
         calculate_next_positions();
         render();
    }

=end programlisting

=head2 Issues

This game loop works well for consoles and devices where the share of CPU clock speed is always known. The game users will be using the 
same processor characteristics to run this code. This means that each animation and calculation will happen at the exact same time in each machine. Unfortunately this is typical not typical true for modern operating systems and hardware.
For faster CPUs and systems with varying loads we need to regulate updates 
so game play will be consistent in most cases.

=head1 Fixed FPS

One way to solve this problem is to regulate the "Frames Per Second" for your games updates.  A "frame" is defined as a complete redraw of the screen representing the updated game state.
We can keep track of the number of frames we are delivering each second and control it using the technique illustrated below. 

=head2 Exercise 

First run the below script with no fps fixing:

    perl game_fixed.pl

You will see that the FPS is erratic, and the laser seems to speed up and slow down randomly.

Next fix the upper bounds of the FPS

    perl game_fixed.pl 1

This will prevent the laser from going too fast, in this case faster then 60 frames per second.

Finally fix the lower bounds of the FPS

    perl game_fixed.pl 1 1

At this point the FPS should be at a steady 60 frames per second. However if this is not the case
read on to the problems below.


=begin programlisting

	use strict;
	use warnings;
	use SDL;
	use SDL::Event;
	use SDL::Events;
	use SDLx::App;

	my $app = SDLx::App->new(
			width  => 200,
			height => 200,
			title  => 'Pew Pew'
			);

	# Variables 
	# to save our start/end and delta times for each frame
	# to save our frames and FPS 
	my ( $start, $end, $delta_time, $FPS, $frames ) = ( 0, 0, 0, 0, 0 );

	# We will aim for a rate of 60 frames per second 
	my $fixed_rate = 60;

	# Our times are in micro second, so we will compensate for it
	my $fps_check = (1000/ $fixed_rate );

	#Don't need to quit yet
	my $quit = 0;

	#Start laser on the left
	my $laser = 0;

	sub get_events {

		my $event = SDL::Event->new();

	#Pump the event queue
		SDL::Events::pump_events;

		while ( SDL::Events::poll_event($event) ) {
			$quit = 1 if $event->type == SDL_QUIT;
		}
	}

	sub calculate_next_positions {
		$laser++;

		$laser = 0 if $laser > $app->w;
	}

	sub render {

	#Draw the background first
		$app->draw_rect( [ 0, 0, $app->w, $app->h ], 0 );

	#Draw the laser
		$app->draw_rect( [ $laser, $app->h / 2, 10, 2 ], [ 255, 0, 0, 255 ] );

	#Draw our FPS on the screen so we can see
		$app->draw_gfx_text( [ 10, 10 ], [ 255, 0, 255, 255 ], "FPS: $FPS" );

		$app->update();
	}


	# Called at the end of each frame, wether we draw or not
	sub calculate_fps_at_frame_end
	{

		# Ticks are microseconds since load time
		$end = SDL::get_ticks();

		# We will average our frame rate over 10 frames, to give less erratic rates
		if ( $frames < 10 ) {
			
			#Count a frame
			$frames++;
			
			#Calculate how long it took from the start 
			$delta_time += $end - $start;
		}
		else {

			# Our frame rate is our  Frames * 100 / Time Elapsed in us
			$FPS        = int( ( $frames * 100 ) / $delta_time );

			# Reset our metrics
			$frames     = 0;
			$delta_time = 0;
		}



	}

	while ( !$quit ) {


		# Get the time for the starting of the frame
		$start = SDL::get_ticks();

		get_events();

		# If we are fixing the lower bounds of the frame rate
		if( $ARGV[1] )
		{

			# And our delta time is going too slow for frame check
			if ( $delta_time > $fps_check ) {

				# Calculate our FPS from this 
				calculate_fps_at_frame_end();

				# Skip rendering and collision detections 
				# The heavy functions in the game loop
				next;		  

			}

		}


		calculate_next_positions();
		render();

		# A normal frame with rendering actually performed
		calculate_fps_at_frame_end();

		# if we are fixing the upper bounds of the frame rate
		if ( $ARGV[0] ) {
			
			# and our delta time is going too fast compared to the frame check
			if ( $delta_time < $fps_check ) {

				# delay for the difference
				SDL::delay( $fps_check - $delta_time );
			}
		}


	}

=end programlisting

=head2 Problems

Generally this method is sufficient for most computers out there. The animations will be smooth
enough that we see the same game play on differing hardware. However there are some serious
problems with this method. First if a computer is too slow for 60 frames for second it will skip a
lot of rendering, and the animation will look sparse and jittery. Maybe it would be better for 30 fps
or lower for that machine, which is hard for the developer to predict. Secondly if a CPU is fast, a 
lot of CPU cycles are wasted in the delay. 

Finally this method does not fix the fundamental problem that the rendering is fixed to CPU clock speed.

=head2 Potential Fix: Variable FPS

One way to fix the problem of a computer being consistently faster or slower for the default Frame per 
Second set, is to change the FPS accordingly. So far a slow CPU it will jump down to 30 FPS and so on. 
In our opinion, although a consistent FPS can be achieved this way, it still presents the problem of differing
animation speeds for different CPUs and systems. 
There are better solutions available.

=head1 Integrating Physics

The problem caused by coupling rendering to the CPU speed has a convenient solution. We can derive our rendering from a physical model based on 
the passage of time.  Objects moving according to real world time will have consistent behavior at all CPU speeds, and smooth interpolation between frames. 
SDLx::App provides just such features for our convenience through movement handlers and 'show' handlers.

A simple physics model for our laser has a consistant horizontal velocity in pixels per time step at the window's mid-point:

    X = Velocity * time step,
    Y = 100

Assuming a velocity of say 10, we will get points like:

    0,100
    10,100
    20,100
    30,100
    ...
    200,100

Note that it no longer matters at what speed this equation is processed, instead the values are coupled to the passage of real time. 

The biggest problem with this sort of solution the book keeping requried for many objects and callbacks.  The implementation of such complex models is non trivial,
and will not be explored in this book.  The topic is discussed at length in the C<SDLx::Controller> module. 

=head2 Laser in Real Time

This version of the laser example demonstrates the use of movement, and 'show'
handlers and the simple physics model described above.  This example
is also much simpler since SDLx::App is doing more of the book work for
us.  It even implements the whole game loop for us.

=begin programlisting

	use strict;
	use warnings;
	use SDL;
	use SDL::Event;
	use SDLx::App;

	my $app = SDLx::App->new(
	    width  => 200,
	    height => 200,
	    title  => 'Pew Pew'
	);

	my $laser    = 0;
	my $velocity = 10;

	#We can add an event handler
	$app->add_event_handler( \&quit_event );

	#We tell app to handle the appropriate times to
	#call both rendering and physics calculation

	$app->add_move_handler( \&calculate_laser );
	$app->add_show_handler( \&render_laser );

	$app->run();

	sub quit_event {

	    #The callback is provided a SDL::Event to use
	    my $event = shift;

	    #Each event handler also returns you back the Controller call it
	    my $controller = shift;

	    #Stoping the controller for us will exit $app->run() for us
	    $controller->stop if $event->type == SDL_QUIT;
	}

	sub calculate_laser {

	    # The step is the difference in Time calculated for the
	    # next jump
	    my ( $step, $app, $t ) = @_;
	    $laser += $velocity * $step;
	    $laser = 0 if $laser > $app->w;
	}

	sub render_laser {
	    my ( $delta, $app ) = @_;

	    # The delta can be used to render blurred frames

	    #Draw the background first
	    $app->draw_rect( [ 0, 0, $app->w, $app->h ], 0 );

	    #Draw the laser
	    $app->draw_rect( [ $laser, $app->h / 2, 10, 2 ], [ 255, 0, 0, 255 ] );
	    $app->update();

	}

=end programlisting

=head1 Learn More

To learn more about this topic please, see an excellent blog post by B<GafferOnGames.com>: L<http://gafferongames.com/game-physics/fix-your-timestep/>.

=for vim: spell
