=head0 The Game Loop

X<game loop>

Just as an interactive SDL app builds around an event loop, a game builds
around a game loop. The simplest game loop is something like:

=begin programlisting

    while (!$quit)
    {
       get_events();
       calculate_next_positions();
       render();
    }

=end programlisting

The names of the functions called in this loop hint at their purposes, but the
subtleties of even this simple code are important.  C<get_events()> obviously
processes events from the relevant input devices (keyboard, mouse, joystick).
Processing events at the start of every game loop iteration helps to prevent
lag.

C<calculate_next_positions> updates the game state according to user input as
well as any active animations (a player walking, an explosion, a cut scene).
C<render()> finally updates and displays the screen.

=head1 A Practical Game Loop

Consider a game with a moving laser bolt:

=begin programlisting

    use strict;
    use warnings;
    use SDL;
    use SDL::Event;
    use SDL::Events;
    use SDLx::App;

    my $app = SDLx::App->new(
        width  => 200,
        height => 200,
        title  => 'Pew Pew'
    );

    my $quit = 0;

    # start laser on the left
    my $laser = 0;

    sub get_events {
        my $event = SDL::Event->new();

        SDL::Events::pump_events;

        while( SDL::Events::poll_event($event) )
        {
            $quit = 1 if $event->type == SDL_QUIT
        }
    }

    sub calculate_next_positions {
	    # move the laser
        $laser++;

	    # if the laser goes off the screen, bring it back
        $laser = 0 if $laser > $app->w();
    }

    sub render {
        # draw the background first
        $app->draw_rect( [ 0, 0, $app->w, $app->h ], 0 );

        # draw the laser halfway up the screen
        $app->draw_rect( [ $laser, $app->h / 2, 10, 2 ], [ 255, 0, 0, 255 ]);

        $app->update();
    }

    while (!$quit)
    {
         get_events();
         calculate_next_positions();
         render();
    }

=end programlisting

This game loop works very well for consoles and other devices where you know
exactly how much CPU time the game will get for every loop iteration. That
hardware stability is easy to predict: each animation and calculation will
happen at the same time for each machine.  Unfortunately, this is I<not> true
for modern operating systems and general purpose computing hardware. CPU speeds
and workloads vary, so for this game to play consistently across multiple
machines and myriad configurations, the game loop itself needs to regulate its
updates.

=head2 Fixed FPS

X<FPS>
X<frame>

One way to solve this problem is to regulate the number of frames per second
the game will produce. A I<frame> is a complete redraw of the screen
representing the updated game state. If each iteration of the game loop draws
one frame, the more frames per second, the faster the game is running. If the
game loop limits the number of frames per second, the game will perform
consistently on all machines fast enough to draw that many frames per second.

You can see this with the example program F<game_fixed.pl>. When run with no
arguments:

    $ B<perl game_fixed.pl>

.... the FPS rate will be erratic. The laser seems to change its speed
randomly. When run with a single argument, the game sets an upper bound on the
number of frames per second:

    $ B<perl game_fixed.pl 1>

This will prevent the laser from going faster than 60 frames per second. When
run with a second argument, the game will set a lower bound of frames per
second:

    $ B<perl game_fixed.pl 1 1>

At this point the FPS should hold steady at 60 frames per second.

=begin programlisting

	use strict;
	use warnings;
	use SDL;
	use SDL::Event;
	use SDL::Events;
	use SDLx::App;

	my $app = SDLx::App->new(
			width  => 200,
			height => 200,
			title  => 'Pew Pew'
	);

	my ( $start, $end, $delta_time, $FPS, $frames ) = ( 0, 0, 0, 0, 0 );

	# aim for a rate of 60 frames per second
	my $fixed_rate = 60;

	# compensate for times stored in microseconds
	my $fps_check = (1000 / $fixed_rate );

	my $quit = 0;

	# start laser on the left
	my $laser = 0;

	sub get_events {
		my $event = SDL::Event->new();

		SDL::Events::pump_events;

		while ( SDL::Events::poll_event($event) ) {
			$quit = 1 if $event->type == SDL_QUIT;
		}
	}

	sub calculate_next_positions {
		$laser++;

		$laser = 0 if $laser > $app->w;
	}

	sub render {
		# draw the background first
		$app->draw_rect( [ 0, 0, $app->w, $app->h ], 0 );

		# draw the laser
		$app->draw_rect( [ $laser, $app->h / 2, 10, 2 ], [ 255, 0, 0, 255 ] );

		# draw the FPS
		$app->draw_gfx_text( [ 10, 10 ], [ 255, 0, 255, 255 ], "FPS: $FPS" );

		$app->update();
	}

	# Called at the end of each frame, whether we draw or not
	sub calculate_fps_at_frame_end
	{
		# Ticks are microseconds since load time
		$end = SDL::get_ticks();

        # smooth the frame rate by averaging over 10 frames
		if ( $frames < 10 ) {
			$frames++;
			$delta_time += $end - $start;
		}
		else {
			# frame rate is Frames * 100 / Time Elapsed in us
            $FPS        = int( ( $frames * 100 ) / $delta_time )
                        if $delta_time != 0;

			# reset metrics
			$frames     = 0;
			$delta_time = 0;
		}
	}

	while ( !$quit ) {
		# Get the time for the starting of the frame
		$start = SDL::get_ticks();

		get_events();

		# if fixing the lower bounds of the frame rate
		if( $ARGV[1] )
		{
			# if delta time is going too slow for frame check
			if ( $delta_time > $fps_check ) {

				calculate_fps_at_frame_end();

                # skip rendering and collision detections
                # (heavy functions in the game loop)
				next;		
			}
		}

		calculate_next_positions();
		render();

		# a normal frame with rendering actually performed
		calculate_fps_at_frame_end();

		# if fixing the upper bounds of the frame rate
		if ( $ARGV[0] ) {
			
			# if delta time is going too fast compared to the frame check
			if ( $delta_time < $fps_check ) {

				# delay for the difference
				SDL::delay( $fps_check - $delta_time );
			}
		}
	}

=end programlisting

This method is generally sufficient for most computers. The animations will be
smooth enough to provide the same gameplay even on machines with different
hardware.

However, this method still has some serious problems. First, if a computer is
too slow to sustain a rate of 60 FPS, the game will skip rendering some frames,
leading to sparse and jittery animation.it will skip a lot of rendering, and
the animation will look sparse and jittery. It might be better to set a lower
bounds of 30 FPS, though it's difficult to predict the best frame rate for a
user.

The worst problem is that this technique still ties rendering speed to the CPU
speed: a very fast computer will waste CPU cycles delaying.

=head2 Variable FPS

To fix the problem of a computer being consistently too fast or too slow for
the hard-coded FPS rate is to adjust the FPS rate accordingly. A slow CPU may
limit itself to 30 FPS, while a fast CPU might run at 300 FPS. Although you may
achieve a consistent rate this way (consistent for any one particular
computer), this technique still presents the problem of differing animation
speeds between different computers.

Better solutions are available.

=head1 Integrating Physics

=for editor

Describe movement and show handlers.

=end for

The problem caused by coupling rendering to the CPU speed has a convenient
solution. Instead of updating object positions based on how fast the computer
can get through the game loop, derive their positions from a physical model
based on the passage of time. Objects moving according to real world time will
have consistent behavior at all CPU speeds  and smooth interpolation between
frames. C<SDLx::App> provides this behavior through movement and show handlers.

Consider a  simple physics model for the laser has a consistent horizontal velocity in
pixels per time step at the window's mid-point:

    X = Velocity * time step,
    Y = 100

Assuming a velocity of 10, the laser will pass through the coordinates:

      0, 100
     10, 100
     20, 100
     30, 100
    ...
    200, 100

Note that the speed of processing the game loop no longer matters. The position
of the laser depends instead on the passage of real time.

The biggest problem with this approach is the required bookkeeping for the many
objects and callbacks. The implementation of such complex models is
non-trivial; see the lengthy discussion in the documentation of the
C<SDLx::Controller> module.

C<SDLx::App> using the C<SDLx::Controller> module provide callbacks to handle both 
aspects of this type of game loop. One is the the movement handler, which is a 
callback where calculations of the next step for each relevant data point is calculated. 
In the above example the movement handler would calculate the C<X> and C<Y> values, for 
each time step between the frames of animations. 

When we are ready to render the frame it is handled by the show handler. In the above 
example that would mean the show handler would print or render the C<X, Y> values. 

=head2 Laser in Real Time

This version of the laser example demonstrates the use of movement, show
handlers, and a simple physics model. This example also shows how C<SDLx::App>
can do more of the work, even providing the entire game loop:

=begin programlisting

	use strict;
	use warnings;
	use SDL;
	use SDL::Event;
	use SDLx::App;

	my $app = SDLx::App->new(
	    width  => 200,
	    height => 200,
	    title  => 'Pew Pew'
	);

	my $laser    = 0;
	my $velocity = 10;

	$app->add_event_handler( \&quit_event );

	# tell app to handle the appropriate times to
	# call both rendering and physics calculation

	$app->add_move_handler( \&calculate_laser );
	$app->add_show_handler( \&render_laser );

	$app->run();

	sub quit_event {
	    my $event      = shift;
	    my $controller = shift;

	    $controller->stop if $event->type == SDL_QUIT;
	}

	sub calculate_laser {

	    # The step is the difference in Time calculated for the next jump
	    my ( $step, $app, $t ) = @_;
	    $laser += $velocity * $step;
	    $laser = 0 if $laser > $app->w;
	}

	sub render_laser {
	    my ( $delta, $app ) = @_;

	    # The delta can be used to render blurred frames

	    # draw the background first
	    $app->draw_rect( [ 0, 0, $app->w, $app->h ], 0 );

	    # draw the laser
	    $app->draw_rect( [ $laser, $app->h / 2, 10, 2 ], [ 255, 0, 0, 255 ] );
	    $app->update();
	}

=end programlisting

To learn more about this topic please, see an excellent blog post by B<GafferOnGames.com>: U<HTTP://GafferOnGames.Com/game-physics/fix-your-timestep>.

=for vim: spell
